// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

// Auto-generated initialization code.

final ffi.Pointer<T> Function<T extends ffi.NativeType>(String sym) jniLookup =
    ProtectedJniExtensions.initGeneratedLibrary("jni_c_bindings");

/// from: java.util.concurrent.Executors
class Executors extends jni.JObject {
  @override
  late final jni.JObjType<Executors> $type = type;

  Executors.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $ExecutorsType();
  static final _newFixedThreadPool =
      jniLookup<ffi.NativeFunction<jni.JniResult Function(ffi.Int32)>>(
              "Executors__newFixedThreadPool")
          .asFunction<jni.JniResult Function(int)>();

  /// from: static public java.util.concurrent.ExecutorService newFixedThreadPool(int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject newFixedThreadPool(
    int i,
  ) {
    return const jni.JObjectType().fromRef(_newFixedThreadPool(i).object);
  }

  static final _newWorkStealingPool =
      jniLookup<ffi.NativeFunction<jni.JniResult Function(ffi.Int32)>>(
              "Executors__newWorkStealingPool")
          .asFunction<jni.JniResult Function(int)>();

  /// from: static public java.util.concurrent.ExecutorService newWorkStealingPool(int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject newWorkStealingPool(
    int i,
  ) {
    return const jni.JObjectType().fromRef(_newWorkStealingPool(i).object);
  }

  static final _newWorkStealingPool1 =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "Executors__newWorkStealingPool1")
          .asFunction<jni.JniResult Function()>();

  /// from: static public java.util.concurrent.ExecutorService newWorkStealingPool()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject newWorkStealingPool1() {
    return const jni.JObjectType().fromRef(_newWorkStealingPool1().object);
  }

  static final _newFixedThreadPool1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Executors__newFixedThreadPool1")
      .asFunction<jni.JniResult Function(int, ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.ExecutorService newFixedThreadPool(int i, java.util.concurrent.ThreadFactory threadFactory)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject newFixedThreadPool1(
    int i,
    jni.JObject threadFactory,
  ) {
    return const jni.JObjectType()
        .fromRef(_newFixedThreadPool1(i, threadFactory.reference).object);
  }

  static final _newSingleThreadExecutor =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "Executors__newSingleThreadExecutor")
          .asFunction<jni.JniResult Function()>();

  /// from: static public java.util.concurrent.ExecutorService newSingleThreadExecutor()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject newSingleThreadExecutor() {
    return const jni.JObjectType().fromRef(_newSingleThreadExecutor().object);
  }

  static final _newSingleThreadExecutor1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Executors__newSingleThreadExecutor1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.ExecutorService newSingleThreadExecutor(java.util.concurrent.ThreadFactory threadFactory)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject newSingleThreadExecutor1(
    jni.JObject threadFactory,
  ) {
    return const jni.JObjectType()
        .fromRef(_newSingleThreadExecutor1(threadFactory.reference).object);
  }

  static final _newCachedThreadPool =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "Executors__newCachedThreadPool")
          .asFunction<jni.JniResult Function()>();

  /// from: static public java.util.concurrent.ExecutorService newCachedThreadPool()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject newCachedThreadPool() {
    return const jni.JObjectType().fromRef(_newCachedThreadPool().object);
  }

  static final _newCachedThreadPool1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Executors__newCachedThreadPool1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.ExecutorService newCachedThreadPool(java.util.concurrent.ThreadFactory threadFactory)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject newCachedThreadPool1(
    jni.JObject threadFactory,
  ) {
    return const jni.JObjectType()
        .fromRef(_newCachedThreadPool1(threadFactory.reference).object);
  }

  static final _newSingleThreadScheduledExecutor =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "Executors__newSingleThreadScheduledExecutor")
          .asFunction<jni.JniResult Function()>();

  /// from: static public java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject newSingleThreadScheduledExecutor() {
    return const jni.JObjectType()
        .fromRef(_newSingleThreadScheduledExecutor().object);
  }

  static final _newSingleThreadScheduledExecutor1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Executors__newSingleThreadScheduledExecutor1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.ScheduledExecutorService newSingleThreadScheduledExecutor(java.util.concurrent.ThreadFactory threadFactory)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject newSingleThreadScheduledExecutor1(
    jni.JObject threadFactory,
  ) {
    return const jni.JObjectType().fromRef(
        _newSingleThreadScheduledExecutor1(threadFactory.reference).object);
  }

  static final _newScheduledThreadPool =
      jniLookup<ffi.NativeFunction<jni.JniResult Function(ffi.Int32)>>(
              "Executors__newScheduledThreadPool")
          .asFunction<jni.JniResult Function(int)>();

  /// from: static public java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject newScheduledThreadPool(
    int i,
  ) {
    return const jni.JObjectType().fromRef(_newScheduledThreadPool(i).object);
  }

  static final _newScheduledThreadPool1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("Executors__newScheduledThreadPool1")
      .asFunction<jni.JniResult Function(int, ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int i, java.util.concurrent.ThreadFactory threadFactory)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject newScheduledThreadPool1(
    int i,
    jni.JObject threadFactory,
  ) {
    return const jni.JObjectType()
        .fromRef(_newScheduledThreadPool1(i, threadFactory.reference).object);
  }

  static final _unconfigurableExecutorService = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Executors__unconfigurableExecutorService")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.ExecutorService unconfigurableExecutorService(java.util.concurrent.ExecutorService executorService)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject unconfigurableExecutorService(
    jni.JObject executorService,
  ) {
    return const jni.JObjectType().fromRef(
        _unconfigurableExecutorService(executorService.reference).object);
  }

  static final _unconfigurableScheduledExecutorService = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Executors__unconfigurableScheduledExecutorService")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.ScheduledExecutorService unconfigurableScheduledExecutorService(java.util.concurrent.ScheduledExecutorService scheduledExecutorService)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject unconfigurableScheduledExecutorService(
    jni.JObject scheduledExecutorService,
  ) {
    return const jni.JObjectType().fromRef(
        _unconfigurableScheduledExecutorService(
                scheduledExecutorService.reference)
            .object);
  }

  static final _defaultThreadFactory =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "Executors__defaultThreadFactory")
          .asFunction<jni.JniResult Function()>();

  /// from: static public java.util.concurrent.ThreadFactory defaultThreadFactory()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject defaultThreadFactory() {
    return const jni.JObjectType().fromRef(_defaultThreadFactory().object);
  }

  static final _privilegedThreadFactory =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "Executors__privilegedThreadFactory")
          .asFunction<jni.JniResult Function()>();

  /// from: static public java.util.concurrent.ThreadFactory privilegedThreadFactory()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject privilegedThreadFactory() {
    return const jni.JObjectType().fromRef(_privilegedThreadFactory().object);
  }

  static final _callable = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Executors__callable")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.Callable callable(java.lang.Runnable runnable, T object)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject callable<$T extends jni.JObject>(
    jni.JObject runnable,
    $T object, {
    jni.JObjType<$T>? T,
  }) {
    T ??= jni.lowestCommonSuperType([
      object.$type,
    ]) as jni.JObjType<$T>;
    return const jni.JObjectType()
        .fromRef(_callable(runnable.reference, object.reference).object);
  }

  static final _callable1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Executors__callable1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.Callable callable(java.lang.Runnable runnable)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject callable1(
    jni.JObject runnable,
  ) {
    return const jni.JObjectType()
        .fromRef(_callable1(runnable.reference).object);
  }

  static final _callable2 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Executors__callable2")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.Callable callable(java.security.PrivilegedAction privilegedAction)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject callable2(
    jni.JObject privilegedAction,
  ) {
    return const jni.JObjectType()
        .fromRef(_callable2(privilegedAction.reference).object);
  }

  static final _callable3 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Executors__callable3")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.Callable callable(java.security.PrivilegedExceptionAction privilegedExceptionAction)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject callable3(
    jni.JObject privilegedExceptionAction,
  ) {
    return const jni.JObjectType()
        .fromRef(_callable3(privilegedExceptionAction.reference).object);
  }

  static final _privilegedCallable = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Executors__privilegedCallable")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.Callable privilegedCallable(java.util.concurrent.Callable callable)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject privilegedCallable<$T extends jni.JObject>(
    jni.JObject callable, {
    required jni.JObjType<$T> T,
  }) {
    return const jni.JObjectType()
        .fromRef(_privilegedCallable(callable.reference).object);
  }

  static final _privilegedCallableUsingCurrentClassLoader = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Executors__privilegedCallableUsingCurrentClassLoader")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.concurrent.Callable privilegedCallableUsingCurrentClassLoader(java.util.concurrent.Callable callable)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject
      privilegedCallableUsingCurrentClassLoader<$T extends jni.JObject>(
    jni.JObject callable, {
    required jni.JObjType<$T> T,
  }) {
    return const jni.JObjectType().fromRef(
        _privilegedCallableUsingCurrentClassLoader(callable.reference).object);
  }
}

class $ExecutorsType extends jni.JObjType<Executors> {
  const $ExecutorsType();

  @override
  String get signature => r"Ljava/util/concurrent/Executors;";

  @override
  Executors fromRef(jni.JObjectPtr ref) => Executors.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ExecutorsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ExecutorsType) && other is $ExecutorsType;
  }
}

/// from: java.net.URL
class URL extends jni.JObject {
  @override
  late final jni.JObjType<URL> $type = type;

  URL.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $URLType();
  static final _new0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>)>>("URL__new0")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String string, java.lang.String string1, int i, java.lang.String string2)
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory URL(
    jni.JString string,
    jni.JString string1,
    int i,
    jni.JString string2,
  ) {
    return URL.fromRef(
        _new0(string.reference, string1.reference, i, string2.reference)
            .object);
  }

  static final _new1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>("URL__new1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String string, java.lang.String string1, java.lang.String string2)
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory URL.new1(
    jni.JString string,
    jni.JString string1,
    jni.JString string2,
  ) {
    return URL.fromRef(
        _new1(string.reference, string1.reference, string2.reference).object);
  }

  static final _new2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("URL__new2")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String string, java.lang.String string1, int i, java.lang.String string2, java.net.URLStreamHandler uRLStreamHandler)
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory URL.new2(
    jni.JString string,
    jni.JString string1,
    int i,
    jni.JString string2,
    jni.JObject uRLStreamHandler,
  ) {
    return URL.fromRef(_new2(string.reference, string1.reference, i,
            string2.reference, uRLStreamHandler.reference)
        .object);
  }

  static final _new3 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "URL__new3")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory URL.new3(
    jni.JString string,
  ) {
    return URL.fromRef(_new3(string.reference).object);
  }

  static final _new4 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>("URL__new4")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.net.URL uRL, java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory URL.new4(
    URL uRL,
    jni.JString string,
  ) {
    return URL.fromRef(_new4(uRL.reference, string.reference).object);
  }

  static final _new5 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>("URL__new5")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.net.URL uRL, java.lang.String string, java.net.URLStreamHandler uRLStreamHandler)
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory URL.new5(
    URL uRL,
    jni.JString string,
    jni.JObject uRLStreamHandler,
  ) {
    return URL.fromRef(
        _new5(uRL.reference, string.reference, uRLStreamHandler.reference)
            .object);
  }

  static final _getQuery = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "URL__getQuery")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getQuery()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getQuery() {
    return const jni.JStringType().fromRef(_getQuery(reference).object);
  }

  static final _getPath = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "URL__getPath")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getPath()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getPath() {
    return const jni.JStringType().fromRef(_getPath(reference).object);
  }

  static final _getUserInfo = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "URL__getUserInfo")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getUserInfo()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getUserInfo() {
    return const jni.JStringType().fromRef(_getUserInfo(reference).object);
  }

  static final _getAuthority = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "URL__getAuthority")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getAuthority()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getAuthority() {
    return const jni.JStringType().fromRef(_getAuthority(reference).object);
  }

  static final _getPort = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "URL__getPort")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getPort()
  int getPort() {
    return _getPort(reference).integer;
  }

  static final _getDefaultPort = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "URL__getDefaultPort")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getDefaultPort()
  int getDefaultPort() {
    return _getDefaultPort(reference).integer;
  }

  static final _getProtocol = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "URL__getProtocol")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getProtocol()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getProtocol() {
    return const jni.JStringType().fromRef(_getProtocol(reference).object);
  }

  static final _getHost = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "URL__getHost")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getHost()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getHost() {
    return const jni.JStringType().fromRef(_getHost(reference).object);
  }

  static final _getFile = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "URL__getFile")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getFile()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getFile() {
    return const jni.JStringType().fromRef(_getFile(reference).object);
  }

  static final _getRef = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "URL__getRef")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getRef()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getRef() {
    return const jni.JStringType().fromRef(_getRef(reference).object);
  }

  static final _equals1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("URL__equals1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object object)
  bool equals1(
    jni.JObject object,
  ) {
    return _equals1(reference, object.reference).boolean;
  }

  static final _hashCode1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "URL__hashCode1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int hashCode()
  int hashCode1() {
    return _hashCode1(reference).integer;
  }

  static final _sameFile = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("URL__sameFile")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean sameFile(java.net.URL uRL)
  bool sameFile(
    URL uRL,
  ) {
    return _sameFile(reference, uRL.reference).boolean;
  }

  static final _toString1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "URL__toString1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString toString1() {
    return const jni.JStringType().fromRef(_toString1(reference).object);
  }

  static final _toExternalForm = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "URL__toExternalForm")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String toExternalForm()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString toExternalForm() {
    return const jni.JStringType().fromRef(_toExternalForm(reference).object);
  }

  static final _toURI = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "URL__toURI")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.net.URI toURI()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject toURI() {
    return const jni.JObjectType().fromRef(_toURI(reference).object);
  }

  static final _openConnection = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "URL__openConnection")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.net.URLConnection openConnection()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject openConnection() {
    return const jni.JObjectType().fromRef(_openConnection(reference).object);
  }

  static final _openConnection1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("URL__openConnection1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.net.URLConnection openConnection(java.net.Proxy proxy)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject openConnection1(
    jni.JObject proxy,
  ) {
    return const jni.JObjectType()
        .fromRef(_openConnection1(reference, proxy.reference).object);
  }

  static final _openStream = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "URL__openStream")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.io.InputStream openStream()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject openStream() {
    return const jni.JObjectType().fromRef(_openStream(reference).object);
  }

  static final _getContent = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "URL__getContent")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object getContent()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getContent() {
    return const jni.JObjectType().fromRef(_getContent(reference).object);
  }

  static final _getContent1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("URL__getContent1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object getContent(java.lang.Class[] classs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getContent1(
    jni.JArray<jni.JObject> classs,
  ) {
    return const jni.JObjectType()
        .fromRef(_getContent1(reference, classs.reference).object);
  }

  static final _setURLStreamHandlerFactory = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "URL__setURLStreamHandlerFactory")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public void setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory uRLStreamHandlerFactory)
  static void setURLStreamHandlerFactory(
    jni.JObject uRLStreamHandlerFactory,
  ) {
    return _setURLStreamHandlerFactory(uRLStreamHandlerFactory.reference)
        .check();
  }
}

class $URLType extends jni.JObjType<URL> {
  const $URLType();

  @override
  String get signature => r"Ljava/net/URL;";

  @override
  URL fromRef(jni.JObjectPtr ref) => URL.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($URLType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($URLType) && other is $URLType;
  }
}

/// from: io.flutter.plugins.cronet_http.UrlRequestCallbackProxy$UrlRequestCallbackInterface
class UrlRequestCallbackProxy_UrlRequestCallbackInterface extends jni.JObject {
  @override
  late final jni.JObjType<UrlRequestCallbackProxy_UrlRequestCallbackInterface>
      $type = type;

  UrlRequestCallbackProxy_UrlRequestCallbackInterface.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type =
      $UrlRequestCallbackProxy_UrlRequestCallbackInterfaceType();
  static final _onRedirectReceived = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "UrlRequestCallbackProxy_UrlRequestCallbackInterface__onRedirectReceived")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onRedirectReceived(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo, java.lang.String string)
  void onRedirectReceived(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
    jni.JString string,
  ) {
    return _onRedirectReceived(reference, urlRequest.reference,
            urlResponseInfo.reference, string.reference)
        .check();
  }

  static final _onResponseStarted = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "UrlRequestCallbackProxy_UrlRequestCallbackInterface__onResponseStarted")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onResponseStarted(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo)
  void onResponseStarted(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
  ) {
    return _onResponseStarted(
            reference, urlRequest.reference, urlResponseInfo.reference)
        .check();
  }

  static final _onReadCompleted = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "UrlRequestCallbackProxy_UrlRequestCallbackInterface__onReadCompleted")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onReadCompleted(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo, java.nio.ByteBuffer byteBuffer)
  void onReadCompleted(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
    jni.JObject byteBuffer,
  ) {
    return _onReadCompleted(reference, urlRequest.reference,
            urlResponseInfo.reference, byteBuffer.reference)
        .check();
  }

  static final _onSucceeded = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "UrlRequestCallbackProxy_UrlRequestCallbackInterface__onSucceeded")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onSucceeded(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo)
  void onSucceeded(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
  ) {
    return _onSucceeded(
            reference, urlRequest.reference, urlResponseInfo.reference)
        .check();
  }

  static final _onFailed = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "UrlRequestCallbackProxy_UrlRequestCallbackInterface__onFailed")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onFailed(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo, org.chromium.net.CronetException cronetException)
  void onFailed(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
    CronetException cronetException,
  ) {
    return _onFailed(reference, urlRequest.reference, urlResponseInfo.reference,
            cronetException.reference)
        .check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int,
      $UrlRequestCallbackProxy_UrlRequestCallbackInterfaceImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(deleteOriginal: true);
      final $a = $i.args;
      if ($d ==
          r"onRedirectReceived(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;Ljava/lang/String;)V") {
        _$impls[$p]!.onRedirectReceived(
          $a[0].castTo(const $UrlRequestType(), deleteOriginal: true),
          $a[1].castTo(const $UrlResponseInfoType(), deleteOriginal: true),
          $a[2].castTo(const jni.JStringType(), deleteOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d ==
          r"onResponseStarted(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;)V") {
        _$impls[$p]!.onResponseStarted(
          $a[0].castTo(const $UrlRequestType(), deleteOriginal: true),
          $a[1].castTo(const $UrlResponseInfoType(), deleteOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d ==
          r"onReadCompleted(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;Ljava/nio/ByteBuffer;)V") {
        _$impls[$p]!.onReadCompleted(
          $a[0].castTo(const $UrlRequestType(), deleteOriginal: true),
          $a[1].castTo(const $UrlResponseInfoType(), deleteOriginal: true),
          $a[2].castTo(const jni.JObjectType(), deleteOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d ==
          r"onSucceeded(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;)V") {
        _$impls[$p]!.onSucceeded(
          $a[0].castTo(const $UrlRequestType(), deleteOriginal: true),
          $a[1].castTo(const $UrlResponseInfoType(), deleteOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d ==
          r"onFailed(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;Lorg/chromium/net/CronetException;)V") {
        _$impls[$p]!.onFailed(
          $a[0].castTo(const $UrlRequestType(), deleteOriginal: true),
          $a[1].castTo(const $UrlResponseInfoType(), deleteOriginal: true),
          $a[2].castTo(const $CronetExceptionType(), deleteOriginal: true),
        );
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e.toString());
    }
    return jni.nullptr;
  }

  factory UrlRequestCallbackProxy_UrlRequestCallbackInterface.implement(
    $UrlRequestCallbackProxy_UrlRequestCallbackInterfaceImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = UrlRequestCallbackProxy_UrlRequestCallbackInterface.fromRef(
      ProtectedJniExtensions.newPortProxy(
        r"io.flutter.plugins.cronet_http.UrlRequestCallbackProxy$UrlRequestCallbackInterface",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract class $UrlRequestCallbackProxy_UrlRequestCallbackInterfaceImpl {
  factory $UrlRequestCallbackProxy_UrlRequestCallbackInterfaceImpl({
    required void Function(UrlRequest urlRequest,
            UrlResponseInfo urlResponseInfo, jni.JString string)
        onRedirectReceived,
    required void Function(
            UrlRequest urlRequest, UrlResponseInfo urlResponseInfo)
        onResponseStarted,
    required void Function(UrlRequest urlRequest,
            UrlResponseInfo urlResponseInfo, jni.JObject byteBuffer)
        onReadCompleted,
    required void Function(
            UrlRequest urlRequest, UrlResponseInfo urlResponseInfo)
        onSucceeded,
    required void Function(UrlRequest urlRequest,
            UrlResponseInfo urlResponseInfo, CronetException cronetException)
        onFailed,
  }) = _$UrlRequestCallbackProxy_UrlRequestCallbackInterfaceImpl;

  void onRedirectReceived(UrlRequest urlRequest,
      UrlResponseInfo urlResponseInfo, jni.JString string);
  void onResponseStarted(
      UrlRequest urlRequest, UrlResponseInfo urlResponseInfo);
  void onReadCompleted(UrlRequest urlRequest, UrlResponseInfo urlResponseInfo,
      jni.JObject byteBuffer);
  void onSucceeded(UrlRequest urlRequest, UrlResponseInfo urlResponseInfo);
  void onFailed(UrlRequest urlRequest, UrlResponseInfo urlResponseInfo,
      CronetException cronetException);
}

class _$UrlRequestCallbackProxy_UrlRequestCallbackInterfaceImpl
    implements $UrlRequestCallbackProxy_UrlRequestCallbackInterfaceImpl {
  _$UrlRequestCallbackProxy_UrlRequestCallbackInterfaceImpl({
    required void Function(UrlRequest urlRequest,
            UrlResponseInfo urlResponseInfo, jni.JString string)
        onRedirectReceived,
    required void Function(
            UrlRequest urlRequest, UrlResponseInfo urlResponseInfo)
        onResponseStarted,
    required void Function(UrlRequest urlRequest,
            UrlResponseInfo urlResponseInfo, jni.JObject byteBuffer)
        onReadCompleted,
    required void Function(
            UrlRequest urlRequest, UrlResponseInfo urlResponseInfo)
        onSucceeded,
    required void Function(UrlRequest urlRequest,
            UrlResponseInfo urlResponseInfo, CronetException cronetException)
        onFailed,
  })  : _onRedirectReceived = onRedirectReceived,
        _onResponseStarted = onResponseStarted,
        _onReadCompleted = onReadCompleted,
        _onSucceeded = onSucceeded,
        _onFailed = onFailed;

  final void Function(UrlRequest urlRequest, UrlResponseInfo urlResponseInfo,
      jni.JString string) _onRedirectReceived;
  final void Function(UrlRequest urlRequest, UrlResponseInfo urlResponseInfo)
      _onResponseStarted;
  final void Function(UrlRequest urlRequest, UrlResponseInfo urlResponseInfo,
      jni.JObject byteBuffer) _onReadCompleted;
  final void Function(UrlRequest urlRequest, UrlResponseInfo urlResponseInfo)
      _onSucceeded;
  final void Function(UrlRequest urlRequest, UrlResponseInfo urlResponseInfo,
      CronetException cronetException) _onFailed;

  void onRedirectReceived(UrlRequest urlRequest,
      UrlResponseInfo urlResponseInfo, jni.JString string) {
    return _onRedirectReceived(urlRequest, urlResponseInfo, string);
  }

  void onResponseStarted(
      UrlRequest urlRequest, UrlResponseInfo urlResponseInfo) {
    return _onResponseStarted(urlRequest, urlResponseInfo);
  }

  void onReadCompleted(UrlRequest urlRequest, UrlResponseInfo urlResponseInfo,
      jni.JObject byteBuffer) {
    return _onReadCompleted(urlRequest, urlResponseInfo, byteBuffer);
  }

  void onSucceeded(UrlRequest urlRequest, UrlResponseInfo urlResponseInfo) {
    return _onSucceeded(urlRequest, urlResponseInfo);
  }

  void onFailed(UrlRequest urlRequest, UrlResponseInfo urlResponseInfo,
      CronetException cronetException) {
    return _onFailed(urlRequest, urlResponseInfo, cronetException);
  }
}

class $UrlRequestCallbackProxy_UrlRequestCallbackInterfaceType
    extends jni.JObjType<UrlRequestCallbackProxy_UrlRequestCallbackInterface> {
  const $UrlRequestCallbackProxy_UrlRequestCallbackInterfaceType();

  @override
  String get signature =>
      r"Lio/flutter/plugins/cronet_http/UrlRequestCallbackProxy$UrlRequestCallbackInterface;";

  @override
  UrlRequestCallbackProxy_UrlRequestCallbackInterface fromRef(
          jni.JObjectPtr ref) =>
      UrlRequestCallbackProxy_UrlRequestCallbackInterface.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode =>
      ($UrlRequestCallbackProxy_UrlRequestCallbackInterfaceType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($UrlRequestCallbackProxy_UrlRequestCallbackInterfaceType) &&
        other is $UrlRequestCallbackProxy_UrlRequestCallbackInterfaceType;
  }
}

/// from: io.flutter.plugins.cronet_http.UrlRequestCallbackProxy
class UrlRequestCallbackProxy extends UrlRequest_Callback {
  @override
  late final jni.JObjType<UrlRequestCallbackProxy> $type = type;

  UrlRequestCallbackProxy.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $UrlRequestCallbackProxyType();
  static final _new1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "UrlRequestCallbackProxy__new1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(io.flutter.plugins.cronet_http.UrlRequestCallbackProxy$UrlRequestCallbackInterface urlRequestCallbackInterface)
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory UrlRequestCallbackProxy.new1(
    UrlRequestCallbackProxy_UrlRequestCallbackInterface
        urlRequestCallbackInterface,
  ) {
    return UrlRequestCallbackProxy.fromRef(
        _new1(urlRequestCallbackInterface.reference).object);
  }

  static final _getCallback = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "UrlRequestCallbackProxy__getCallback")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final io.flutter.plugins.cronet_http.UrlRequestCallbackProxy$UrlRequestCallbackInterface getCallback()
  /// The returned object must be deleted after use, by calling the `delete` method.
  UrlRequestCallbackProxy_UrlRequestCallbackInterface getCallback() {
    return const $UrlRequestCallbackProxy_UrlRequestCallbackInterfaceType()
        .fromRef(_getCallback(reference).object);
  }

  static final _onRedirectReceived = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "UrlRequestCallbackProxy__onRedirectReceived")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onRedirectReceived(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo, java.lang.String string)
  void onRedirectReceived(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
    jni.JString string,
  ) {
    return _onRedirectReceived(reference, urlRequest.reference,
            urlResponseInfo.reference, string.reference)
        .check();
  }

  static final _onResponseStarted = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "UrlRequestCallbackProxy__onResponseStarted")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onResponseStarted(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo)
  void onResponseStarted(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
  ) {
    return _onResponseStarted(
            reference, urlRequest.reference, urlResponseInfo.reference)
        .check();
  }

  static final _onReadCompleted = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "UrlRequestCallbackProxy__onReadCompleted")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onReadCompleted(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo, java.nio.ByteBuffer byteBuffer)
  void onReadCompleted(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
    jni.JObject byteBuffer,
  ) {
    return _onReadCompleted(reference, urlRequest.reference,
            urlResponseInfo.reference, byteBuffer.reference)
        .check();
  }

  static final _onSucceeded = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "UrlRequestCallbackProxy__onSucceeded")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onSucceeded(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo)
  void onSucceeded(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
  ) {
    return _onSucceeded(
            reference, urlRequest.reference, urlResponseInfo.reference)
        .check();
  }

  static final _onFailed = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("UrlRequestCallbackProxy__onFailed")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onFailed(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo, org.chromium.net.CronetException cronetException)
  void onFailed(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
    CronetException cronetException,
  ) {
    return _onFailed(reference, urlRequest.reference, urlResponseInfo.reference,
            cronetException.reference)
        .check();
  }
}

class $UrlRequestCallbackProxyType
    extends jni.JObjType<UrlRequestCallbackProxy> {
  const $UrlRequestCallbackProxyType();

  @override
  String get signature =>
      r"Lio/flutter/plugins/cronet_http/UrlRequestCallbackProxy;";

  @override
  UrlRequestCallbackProxy fromRef(jni.JObjectPtr ref) =>
      UrlRequestCallbackProxy.fromRef(ref);

  @override
  jni.JObjType get superType => const $UrlRequest_CallbackType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($UrlRequestCallbackProxyType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($UrlRequestCallbackProxyType) &&
        other is $UrlRequestCallbackProxyType;
  }
}

/// from: org.chromium.net.CronetEngine$Builder$LibraryLoader
class CronetEngine_Builder_LibraryLoader extends jni.JObject {
  @override
  late final jni.JObjType<CronetEngine_Builder_LibraryLoader> $type = type;

  CronetEngine_Builder_LibraryLoader.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $CronetEngine_Builder_LibraryLoaderType();
  static final _new0 = jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
          "CronetEngine_Builder_LibraryLoader__new0")
      .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory CronetEngine_Builder_LibraryLoader() {
    return CronetEngine_Builder_LibraryLoader.fromRef(_new0().object);
  }

  static final _loadLibrary = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "CronetEngine_Builder_LibraryLoader__loadLibrary")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void loadLibrary(java.lang.String string)
  void loadLibrary(
    jni.JString string,
  ) {
    return _loadLibrary(reference, string.reference).check();
  }
}

class $CronetEngine_Builder_LibraryLoaderType
    extends jni.JObjType<CronetEngine_Builder_LibraryLoader> {
  const $CronetEngine_Builder_LibraryLoaderType();

  @override
  String get signature =>
      r"Lorg/chromium/net/CronetEngine$Builder$LibraryLoader;";

  @override
  CronetEngine_Builder_LibraryLoader fromRef(jni.JObjectPtr ref) =>
      CronetEngine_Builder_LibraryLoader.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CronetEngine_Builder_LibraryLoaderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CronetEngine_Builder_LibraryLoaderType) &&
        other is $CronetEngine_Builder_LibraryLoaderType;
  }
}

/// from: org.chromium.net.CronetEngine$Builder
class CronetEngine_Builder extends jni.JObject {
  @override
  late final jni.JObjType<CronetEngine_Builder> $type = type;

  CronetEngine_Builder.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $CronetEngine_BuilderType();
  static final _get_mBuilderDelegate = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                jni.JObjectPtr,
              )>>("get_CronetEngine_Builder__mBuilderDelegate")
      .asFunction<
          jni.JniResult Function(
            jni.JObjectPtr,
          )>();

  /// from: protected final org.chromium.net.ICronetEngineBuilder mBuilderDelegate
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject get mBuilderDelegate =>
      const jni.JObjectType().fromRef(_get_mBuilderDelegate(reference).object);

  /// from: static public final int HTTP_CACHE_DISABLED
  static const HTTP_CACHE_DISABLED = 0;

  /// from: static public final int HTTP_CACHE_IN_MEMORY
  static const HTTP_CACHE_IN_MEMORY = 1;

  /// from: static public final int HTTP_CACHE_DISK_NO_HTTP
  static const HTTP_CACHE_DISK_NO_HTTP = 2;

  /// from: static public final int HTTP_CACHE_DISK
  static const HTTP_CACHE_DISK = 3;

  static final _new0 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "CronetEngine_Builder__new0")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory CronetEngine_Builder(
    jni.JObject context,
  ) {
    return CronetEngine_Builder.fromRef(_new0(context.reference).object);
  }

  static final _new1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "CronetEngine_Builder__new1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(org.chromium.net.ICronetEngineBuilder iCronetEngineBuilder)
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory CronetEngine_Builder.new1(
    jni.JObject iCronetEngineBuilder,
  ) {
    return CronetEngine_Builder.fromRef(
        _new1(iCronetEngineBuilder.reference).object);
  }

  static final _getDefaultUserAgent = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "CronetEngine_Builder__getDefaultUserAgent")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getDefaultUserAgent()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getDefaultUserAgent() {
    return const jni.JStringType()
        .fromRef(_getDefaultUserAgent(reference).object);
  }

  static final _setUserAgent = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("CronetEngine_Builder__setUserAgent")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public org.chromium.net.CronetEngine$Builder setUserAgent(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine_Builder setUserAgent(
    jni.JString string,
  ) {
    return const $CronetEngine_BuilderType()
        .fromRef(_setUserAgent(reference, string.reference).object);
  }

  static final _setStoragePath = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "CronetEngine_Builder__setStoragePath")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public org.chromium.net.CronetEngine$Builder setStoragePath(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine_Builder setStoragePath(
    jni.JString string,
  ) {
    return const $CronetEngine_BuilderType()
        .fromRef(_setStoragePath(reference, string.reference).object);
  }

  static final _setLibraryLoader = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "CronetEngine_Builder__setLibraryLoader")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public org.chromium.net.CronetEngine$Builder setLibraryLoader(org.chromium.net.CronetEngine$Builder$LibraryLoader libraryLoader)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine_Builder setLibraryLoader(
    CronetEngine_Builder_LibraryLoader libraryLoader,
  ) {
    return const $CronetEngine_BuilderType()
        .fromRef(_setLibraryLoader(reference, libraryLoader.reference).object);
  }

  static final _enableQuic = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("CronetEngine_Builder__enableQuic")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public org.chromium.net.CronetEngine$Builder enableQuic(boolean z)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine_Builder enableQuic(
    bool z,
  ) {
    return const $CronetEngine_BuilderType()
        .fromRef(_enableQuic(reference, z ? 1 : 0).object);
  }

  static final _enableHttp2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("CronetEngine_Builder__enableHttp2")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public org.chromium.net.CronetEngine$Builder enableHttp2(boolean z)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine_Builder enableHttp2(
    bool z,
  ) {
    return const $CronetEngine_BuilderType()
        .fromRef(_enableHttp2(reference, z ? 1 : 0).object);
  }

  static final _enableSdch = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("CronetEngine_Builder__enableSdch")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public org.chromium.net.CronetEngine$Builder enableSdch(boolean z)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine_Builder enableSdch(
    bool z,
  ) {
    return const $CronetEngine_BuilderType()
        .fromRef(_enableSdch(reference, z ? 1 : 0).object);
  }

  static final _enableBrotli = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("CronetEngine_Builder__enableBrotli")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public org.chromium.net.CronetEngine$Builder enableBrotli(boolean z)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine_Builder enableBrotli(
    bool z,
  ) {
    return const $CronetEngine_BuilderType()
        .fromRef(_enableBrotli(reference, z ? 1 : 0).object);
  }

  static final _enableHttpCache = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Int64)>>("CronetEngine_Builder__enableHttpCache")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public org.chromium.net.CronetEngine$Builder enableHttpCache(int i, long j)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine_Builder enableHttpCache(
    int i,
    int j,
  ) {
    return const $CronetEngine_BuilderType()
        .fromRef(_enableHttpCache(reference, i, j).object);
  }

  static final _addQuicHint = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Int32,
                  ffi.Int32)>>("CronetEngine_Builder__addQuicHint")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public org.chromium.net.CronetEngine$Builder addQuicHint(java.lang.String string, int i, int i1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine_Builder addQuicHint(
    jni.JString string,
    int i,
    int i1,
  ) {
    return const $CronetEngine_BuilderType()
        .fromRef(_addQuicHint(reference, string.reference, i, i1).object);
  }

  static final _addPublicKeyPins = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Uint8,
                      ffi.Pointer<ffi.Void>)>>(
          "CronetEngine_Builder__addPublicKeyPins")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public org.chromium.net.CronetEngine$Builder addPublicKeyPins(java.lang.String string, java.util.Set set, boolean z, java.util.Date date)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine_Builder addPublicKeyPins(
    jni.JString string,
    jni.JSet<jni.JArray<jni.jbyte>> set0,
    bool z,
    jni.JObject date,
  ) {
    return const $CronetEngine_BuilderType().fromRef(_addPublicKeyPins(
            reference,
            string.reference,
            set0.reference,
            z ? 1 : 0,
            date.reference)
        .object);
  }

  static final _enablePublicKeyPinningBypassForLocalTrustAnchors = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Uint8)>>(
          "CronetEngine_Builder__enablePublicKeyPinningBypassForLocalTrustAnchors")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public org.chromium.net.CronetEngine$Builder enablePublicKeyPinningBypassForLocalTrustAnchors(boolean z)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine_Builder enablePublicKeyPinningBypassForLocalTrustAnchors(
    bool z,
  ) {
    return const $CronetEngine_BuilderType().fromRef(
        _enablePublicKeyPinningBypassForLocalTrustAnchors(reference, z ? 1 : 0)
            .object);
  }

  static final _setThreadPriority = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("CronetEngine_Builder__setThreadPriority")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public org.chromium.net.CronetEngine$Builder setThreadPriority(int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine_Builder setThreadPriority(
    int i,
  ) {
    return const $CronetEngine_BuilderType()
        .fromRef(_setThreadPriority(reference, i).object);
  }

  static final _enableNetworkQualityEstimator = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Uint8)>>(
          "CronetEngine_Builder__enableNetworkQualityEstimator")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public org.chromium.net.CronetEngine$Builder enableNetworkQualityEstimator(boolean z)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine_Builder enableNetworkQualityEstimator(
    bool z,
  ) {
    return const $CronetEngine_BuilderType()
        .fromRef(_enableNetworkQualityEstimator(reference, z ? 1 : 0).object);
  }

  static final _setQuicOptions = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "CronetEngine_Builder__setQuicOptions")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public org.chromium.net.CronetEngine$Builder setQuicOptions(org.chromium.net.QuicOptions quicOptions)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine_Builder setQuicOptions(
    jni.JObject quicOptions,
  ) {
    return const $CronetEngine_BuilderType()
        .fromRef(_setQuicOptions(reference, quicOptions.reference).object);
  }

  static final _setQuicOptions1 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "CronetEngine_Builder__setQuicOptions1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public org.chromium.net.CronetEngine$Builder setQuicOptions(org.chromium.net.QuicOptions$Builder builder)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine_Builder setQuicOptions1(
    jni.JObject builder,
  ) {
    return const $CronetEngine_BuilderType()
        .fromRef(_setQuicOptions1(reference, builder.reference).object);
  }

  static final _setDnsOptions = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "CronetEngine_Builder__setDnsOptions")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public org.chromium.net.CronetEngine$Builder setDnsOptions(org.chromium.net.DnsOptions dnsOptions)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine_Builder setDnsOptions(
    jni.JObject dnsOptions,
  ) {
    return const $CronetEngine_BuilderType()
        .fromRef(_setDnsOptions(reference, dnsOptions.reference).object);
  }

  static final _setDnsOptions1 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "CronetEngine_Builder__setDnsOptions1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public org.chromium.net.CronetEngine$Builder setDnsOptions(org.chromium.net.DnsOptions$Builder builder)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine_Builder setDnsOptions1(
    jni.JObject builder,
  ) {
    return const $CronetEngine_BuilderType()
        .fromRef(_setDnsOptions1(reference, builder.reference).object);
  }

  static final _setConnectionMigrationOptions = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "CronetEngine_Builder__setConnectionMigrationOptions")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public org.chromium.net.CronetEngine$Builder setConnectionMigrationOptions(org.chromium.net.ConnectionMigrationOptions connectionMigrationOptions)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine_Builder setConnectionMigrationOptions(
    jni.JObject connectionMigrationOptions,
  ) {
    return const $CronetEngine_BuilderType().fromRef(
        _setConnectionMigrationOptions(
                reference, connectionMigrationOptions.reference)
            .object);
  }

  static final _setConnectionMigrationOptions1 = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "CronetEngine_Builder__setConnectionMigrationOptions1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public org.chromium.net.CronetEngine$Builder setConnectionMigrationOptions(org.chromium.net.ConnectionMigrationOptions$Builder builder)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine_Builder setConnectionMigrationOptions1(
    jni.JObject builder,
  ) {
    return const $CronetEngine_BuilderType().fromRef(
        _setConnectionMigrationOptions1(reference, builder.reference).object);
  }

  static final _build = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "CronetEngine_Builder__build")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public org.chromium.net.CronetEngine build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine build() {
    return const $CronetEngineType().fromRef(_build(reference).object);
  }
}

class $CronetEngine_BuilderType extends jni.JObjType<CronetEngine_Builder> {
  const $CronetEngine_BuilderType();

  @override
  String get signature => r"Lorg/chromium/net/CronetEngine$Builder;";

  @override
  CronetEngine_Builder fromRef(jni.JObjectPtr ref) =>
      CronetEngine_Builder.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CronetEngine_BuilderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CronetEngine_BuilderType) &&
        other is $CronetEngine_BuilderType;
  }
}

/// from: org.chromium.net.CronetEngine
class CronetEngine extends jni.JObject {
  @override
  late final jni.JObjType<CronetEngine> $type = type;

  CronetEngine.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $CronetEngineType();

  /// from: static public final int ACTIVE_REQUEST_COUNT_UNKNOWN
  static const ACTIVE_REQUEST_COUNT_UNKNOWN = -1;

  /// from: static public final int CONNECTION_METRIC_UNKNOWN
  static const CONNECTION_METRIC_UNKNOWN = -1;

  /// from: static public final int EFFECTIVE_CONNECTION_TYPE_UNKNOWN
  static const EFFECTIVE_CONNECTION_TYPE_UNKNOWN = 0;

  /// from: static public final int EFFECTIVE_CONNECTION_TYPE_OFFLINE
  static const EFFECTIVE_CONNECTION_TYPE_OFFLINE = 1;

  /// from: static public final int EFFECTIVE_CONNECTION_TYPE_SLOW_2G
  static const EFFECTIVE_CONNECTION_TYPE_SLOW_2G = 2;

  /// from: static public final int EFFECTIVE_CONNECTION_TYPE_2G
  static const EFFECTIVE_CONNECTION_TYPE_2G = 3;

  /// from: static public final int EFFECTIVE_CONNECTION_TYPE_3G
  static const EFFECTIVE_CONNECTION_TYPE_3G = 4;

  /// from: static public final int EFFECTIVE_CONNECTION_TYPE_4G
  static const EFFECTIVE_CONNECTION_TYPE_4G = 5;

  static final _new0 = jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
          "CronetEngine__new0")
      .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory CronetEngine() {
    return CronetEngine.fromRef(_new0().object);
  }

  static final _getVersionString = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "CronetEngine__getVersionString")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getVersionString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getVersionString() {
    return const jni.JStringType().fromRef(_getVersionString(reference).object);
  }

  static final _shutdown = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "CronetEngine__shutdown")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void shutdown()
  void shutdown() {
    return _shutdown(reference).check();
  }

  static final _startNetLogToFile = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Uint8)>>("CronetEngine__startNetLogToFile")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract void startNetLogToFile(java.lang.String string, boolean z)
  void startNetLogToFile(
    jni.JString string,
    bool z,
  ) {
    return _startNetLogToFile(reference, string.reference, z ? 1 : 0).check();
  }

  static final _stopNetLog = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "CronetEngine__stopNetLog")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void stopNetLog()
  void stopNetLog() {
    return _stopNetLog(reference).check();
  }

  static final _getGlobalMetricsDeltas = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "CronetEngine__getGlobalMetricsDeltas")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract byte[] getGlobalMetricsDeltas()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JArray<jni.jbyte> getGlobalMetricsDeltas() {
    return const jni.JArrayType(jni.jbyteType())
        .fromRef(_getGlobalMetricsDeltas(reference).object);
  }

  static final _openConnection = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("CronetEngine__openConnection")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.net.URLConnection openConnection(java.net.URL uRL)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject openConnection(
    URL uRL,
  ) {
    return const jni.JObjectType()
        .fromRef(_openConnection(reference, uRL.reference).object);
  }

  static final _createURLStreamHandlerFactory = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "CronetEngine__createURLStreamHandlerFactory")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.net.URLStreamHandlerFactory createURLStreamHandlerFactory()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject createURLStreamHandlerFactory() {
    return const jni.JObjectType()
        .fromRef(_createURLStreamHandlerFactory(reference).object);
  }

  static final _newUrlRequestBuilder = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("CronetEngine__newUrlRequestBuilder")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract org.chromium.net.UrlRequest$Builder newUrlRequestBuilder(java.lang.String string, org.chromium.net.UrlRequest$Callback callback, java.util.concurrent.Executor executor)
  /// The returned object must be deleted after use, by calling the `delete` method.
  UrlRequest_Builder newUrlRequestBuilder(
    jni.JString string,
    UrlRequest_Callback callback,
    jni.JObject executor,
  ) {
    return const $UrlRequest_BuilderType().fromRef(_newUrlRequestBuilder(
            reference, string.reference, callback.reference, executor.reference)
        .object);
  }

  static final _getActiveRequestCount = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "CronetEngine__getActiveRequestCount")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getActiveRequestCount()
  int getActiveRequestCount() {
    return _getActiveRequestCount(reference).integer;
  }

  static final _addRequestFinishedListener = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "CronetEngine__addRequestFinishedListener")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void addRequestFinishedListener(org.chromium.net.RequestFinishedInfo$Listener listener)
  void addRequestFinishedListener(
    jni.JObject listener,
  ) {
    return _addRequestFinishedListener(reference, listener.reference).check();
  }

  static final _removeRequestFinishedListener = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "CronetEngine__removeRequestFinishedListener")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void removeRequestFinishedListener(org.chromium.net.RequestFinishedInfo$Listener listener)
  void removeRequestFinishedListener(
    jni.JObject listener,
  ) {
    return _removeRequestFinishedListener(reference, listener.reference)
        .check();
  }

  static final _getHttpRttMs = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "CronetEngine__getHttpRttMs")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getHttpRttMs()
  int getHttpRttMs() {
    return _getHttpRttMs(reference).integer;
  }

  static final _getTransportRttMs = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "CronetEngine__getTransportRttMs")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getTransportRttMs()
  int getTransportRttMs() {
    return _getTransportRttMs(reference).integer;
  }

  static final _getDownstreamThroughputKbps = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "CronetEngine__getDownstreamThroughputKbps")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getDownstreamThroughputKbps()
  int getDownstreamThroughputKbps() {
    return _getDownstreamThroughputKbps(reference).integer;
  }

  static final _startNetLogToDisk = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Uint8,
                  ffi.Int32)>>("CronetEngine__startNetLogToDisk")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public void startNetLogToDisk(java.lang.String string, boolean z, int i)
  void startNetLogToDisk(
    jni.JString string,
    bool z,
    int i,
  ) {
    return _startNetLogToDisk(reference, string.reference, z ? 1 : 0, i)
        .check();
  }

  static final _getEffectiveConnectionType = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "CronetEngine__getEffectiveConnectionType")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int getEffectiveConnectionType()
  int getEffectiveConnectionType() {
    return _getEffectiveConnectionType(reference).integer;
  }

  static final _configureNetworkQualityEstimatorForTesting = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Uint8, ffi.Uint8, ffi.Uint8)>>(
          "CronetEngine__configureNetworkQualityEstimatorForTesting")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: public void configureNetworkQualityEstimatorForTesting(boolean z, boolean z1, boolean z2)
  void configureNetworkQualityEstimatorForTesting(
    bool z,
    bool z1,
    bool z2,
  ) {
    return _configureNetworkQualityEstimatorForTesting(
            reference, z ? 1 : 0, z1 ? 1 : 0, z2 ? 1 : 0)
        .check();
  }

  static final _addRttListener = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("CronetEngine__addRttListener")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void addRttListener(org.chromium.net.NetworkQualityRttListener networkQualityRttListener)
  void addRttListener(
    jni.JObject networkQualityRttListener,
  ) {
    return _addRttListener(reference, networkQualityRttListener.reference)
        .check();
  }

  static final _removeRttListener = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("CronetEngine__removeRttListener")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void removeRttListener(org.chromium.net.NetworkQualityRttListener networkQualityRttListener)
  void removeRttListener(
    jni.JObject networkQualityRttListener,
  ) {
    return _removeRttListener(reference, networkQualityRttListener.reference)
        .check();
  }

  static final _addThroughputListener = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "CronetEngine__addThroughputListener")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void addThroughputListener(org.chromium.net.NetworkQualityThroughputListener networkQualityThroughputListener)
  void addThroughputListener(
    jni.JObject networkQualityThroughputListener,
  ) {
    return _addThroughputListener(
            reference, networkQualityThroughputListener.reference)
        .check();
  }

  static final _removeThroughputListener = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "CronetEngine__removeThroughputListener")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void removeThroughputListener(org.chromium.net.NetworkQualityThroughputListener networkQualityThroughputListener)
  void removeThroughputListener(
    jni.JObject networkQualityThroughputListener,
  ) {
    return _removeThroughputListener(
            reference, networkQualityThroughputListener.reference)
        .check();
  }
}

class $CronetEngineType extends jni.JObjType<CronetEngine> {
  const $CronetEngineType();

  @override
  String get signature => r"Lorg/chromium/net/CronetEngine;";

  @override
  CronetEngine fromRef(jni.JObjectPtr ref) => CronetEngine.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CronetEngineType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CronetEngineType) &&
        other is $CronetEngineType;
  }
}

/// from: org.chromium.net.CronetException
class CronetException extends jni.JObject {
  @override
  late final jni.JObjType<CronetException> $type = type;

  CronetException.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $CronetExceptionType();
  static final _new0 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("CronetException__new0")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: protected void <init>(java.lang.String string, java.lang.Throwable throwable)
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory CronetException(
    jni.JString string,
    jni.JObject throwable,
  ) {
    return CronetException.fromRef(
        _new0(string.reference, throwable.reference).object);
  }
}

class $CronetExceptionType extends jni.JObjType<CronetException> {
  const $CronetExceptionType();

  @override
  String get signature => r"Lorg/chromium/net/CronetException;";

  @override
  CronetException fromRef(jni.JObjectPtr ref) => CronetException.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CronetExceptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CronetExceptionType) &&
        other is $CronetExceptionType;
  }
}

/// from: org.chromium.net.UploadDataProviders
class UploadDataProviders extends jni.JObject {
  @override
  late final jni.JObjType<UploadDataProviders> $type = type;

  UploadDataProviders.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $UploadDataProvidersType();
  static final _create = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "UploadDataProviders__create")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public org.chromium.net.UploadDataProvider create(java.io.File file)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject create(
    jni.JObject file,
  ) {
    return const jni.JObjectType().fromRef(_create(file.reference).object);
  }

  static final _create1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "UploadDataProviders__create1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public org.chromium.net.UploadDataProvider create(android.os.ParcelFileDescriptor parcelFileDescriptor)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject create1(
    jni.JObject parcelFileDescriptor,
  ) {
    return const jni.JObjectType()
        .fromRef(_create1(parcelFileDescriptor.reference).object);
  }

  static final _create2 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "UploadDataProviders__create2")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public org.chromium.net.UploadDataProvider create(java.nio.ByteBuffer byteBuffer)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject create2(
    jni.JObject byteBuffer,
  ) {
    return const jni.JObjectType()
        .fromRef(_create2(byteBuffer.reference).object);
  }

  static final _create3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Int32,
                  ffi.Int32)>>("UploadDataProviders__create3")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int, int)>();

  /// from: static public org.chromium.net.UploadDataProvider create(byte[] bs, int i, int i1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject create3(
    jni.JArray<jni.jbyte> bs,
    int i,
    int i1,
  ) {
    return const jni.JObjectType()
        .fromRef(_create3(bs.reference, i, i1).object);
  }

  static final _create4 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "UploadDataProviders__create4")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public org.chromium.net.UploadDataProvider create(byte[] bs)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JObject create4(
    jni.JArray<jni.jbyte> bs,
  ) {
    return const jni.JObjectType().fromRef(_create4(bs.reference).object);
  }
}

class $UploadDataProvidersType extends jni.JObjType<UploadDataProviders> {
  const $UploadDataProvidersType();

  @override
  String get signature => r"Lorg/chromium/net/UploadDataProviders;";

  @override
  UploadDataProviders fromRef(jni.JObjectPtr ref) =>
      UploadDataProviders.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($UploadDataProvidersType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($UploadDataProvidersType) &&
        other is $UploadDataProvidersType;
  }
}

/// from: org.chromium.net.UrlRequest$Builder
class UrlRequest_Builder extends jni.JObject {
  @override
  late final jni.JObjType<UrlRequest_Builder> $type = type;

  UrlRequest_Builder.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $UrlRequest_BuilderType();

  /// from: static public final int REQUEST_PRIORITY_IDLE
  static const REQUEST_PRIORITY_IDLE = 0;

  /// from: static public final int REQUEST_PRIORITY_LOWEST
  static const REQUEST_PRIORITY_LOWEST = 1;

  /// from: static public final int REQUEST_PRIORITY_LOW
  static const REQUEST_PRIORITY_LOW = 2;

  /// from: static public final int REQUEST_PRIORITY_MEDIUM
  static const REQUEST_PRIORITY_MEDIUM = 3;

  /// from: static public final int REQUEST_PRIORITY_HIGHEST
  static const REQUEST_PRIORITY_HIGHEST = 4;

  static final _new0 = jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
          "UrlRequest_Builder__new0")
      .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory UrlRequest_Builder() {
    return UrlRequest_Builder.fromRef(_new0().object);
  }

  static final _setHttpMethod = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("UrlRequest_Builder__setHttpMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract org.chromium.net.UrlRequest$Builder setHttpMethod(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  UrlRequest_Builder setHttpMethod(
    jni.JString string,
  ) {
    return const $UrlRequest_BuilderType()
        .fromRef(_setHttpMethod(reference, string.reference).object);
  }

  static final _addHeader = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("UrlRequest_Builder__addHeader")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract org.chromium.net.UrlRequest$Builder addHeader(java.lang.String string, java.lang.String string1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  UrlRequest_Builder addHeader(
    jni.JString string,
    jni.JString string1,
  ) {
    return const $UrlRequest_BuilderType().fromRef(
        _addHeader(reference, string.reference, string1.reference).object);
  }

  static final _disableCache = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "UrlRequest_Builder__disableCache")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract org.chromium.net.UrlRequest$Builder disableCache()
  /// The returned object must be deleted after use, by calling the `delete` method.
  UrlRequest_Builder disableCache() {
    return const $UrlRequest_BuilderType()
        .fromRef(_disableCache(reference).object);
  }

  static final _setPriority = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("UrlRequest_Builder__setPriority")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract org.chromium.net.UrlRequest$Builder setPriority(int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  UrlRequest_Builder setPriority(
    int i,
  ) {
    return const $UrlRequest_BuilderType()
        .fromRef(_setPriority(reference, i).object);
  }

  static final _setUploadDataProvider = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "UrlRequest_Builder__setUploadDataProvider")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract org.chromium.net.UrlRequest$Builder setUploadDataProvider(org.chromium.net.UploadDataProvider uploadDataProvider, java.util.concurrent.Executor executor)
  /// The returned object must be deleted after use, by calling the `delete` method.
  UrlRequest_Builder setUploadDataProvider(
    jni.JObject uploadDataProvider,
    jni.JObject executor,
  ) {
    return const $UrlRequest_BuilderType().fromRef(_setUploadDataProvider(
            reference, uploadDataProvider.reference, executor.reference)
        .object);
  }

  static final _allowDirectExecutor = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "UrlRequest_Builder__allowDirectExecutor")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract org.chromium.net.UrlRequest$Builder allowDirectExecutor()
  /// The returned object must be deleted after use, by calling the `delete` method.
  UrlRequest_Builder allowDirectExecutor() {
    return const $UrlRequest_BuilderType()
        .fromRef(_allowDirectExecutor(reference).object);
  }

  static final _addRequestAnnotation = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "UrlRequest_Builder__addRequestAnnotation")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public org.chromium.net.UrlRequest$Builder addRequestAnnotation(java.lang.Object object)
  /// The returned object must be deleted after use, by calling the `delete` method.
  UrlRequest_Builder addRequestAnnotation(
    jni.JObject object,
  ) {
    return const $UrlRequest_BuilderType()
        .fromRef(_addRequestAnnotation(reference, object.reference).object);
  }

  static final _setTrafficStatsTag = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("UrlRequest_Builder__setTrafficStatsTag")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public org.chromium.net.UrlRequest$Builder setTrafficStatsTag(int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  UrlRequest_Builder setTrafficStatsTag(
    int i,
  ) {
    return const $UrlRequest_BuilderType()
        .fromRef(_setTrafficStatsTag(reference, i).object);
  }

  static final _setTrafficStatsUid = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("UrlRequest_Builder__setTrafficStatsUid")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public org.chromium.net.UrlRequest$Builder setTrafficStatsUid(int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  UrlRequest_Builder setTrafficStatsUid(
    int i,
  ) {
    return const $UrlRequest_BuilderType()
        .fromRef(_setTrafficStatsUid(reference, i).object);
  }

  static final _setRequestFinishedListener = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "UrlRequest_Builder__setRequestFinishedListener")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public org.chromium.net.UrlRequest$Builder setRequestFinishedListener(org.chromium.net.RequestFinishedInfo$Listener listener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  UrlRequest_Builder setRequestFinishedListener(
    jni.JObject listener,
  ) {
    return const $UrlRequest_BuilderType().fromRef(
        _setRequestFinishedListener(reference, listener.reference).object);
  }

  static final _build = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "UrlRequest_Builder__build")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract org.chromium.net.UrlRequest build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  UrlRequest build() {
    return const $UrlRequestType().fromRef(_build(reference).object);
  }
}

class $UrlRequest_BuilderType extends jni.JObjType<UrlRequest_Builder> {
  const $UrlRequest_BuilderType();

  @override
  String get signature => r"Lorg/chromium/net/UrlRequest$Builder;";

  @override
  UrlRequest_Builder fromRef(jni.JObjectPtr ref) =>
      UrlRequest_Builder.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($UrlRequest_BuilderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($UrlRequest_BuilderType) &&
        other is $UrlRequest_BuilderType;
  }
}

/// from: org.chromium.net.UrlRequest$Callback
class UrlRequest_Callback extends jni.JObject {
  @override
  late final jni.JObjType<UrlRequest_Callback> $type = type;

  UrlRequest_Callback.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $UrlRequest_CallbackType();
  static final _new0 = jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
          "UrlRequest_Callback__new0")
      .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory UrlRequest_Callback() {
    return UrlRequest_Callback.fromRef(_new0().object);
  }

  static final _onRedirectReceived = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "UrlRequest_Callback__onRedirectReceived")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onRedirectReceived(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo, java.lang.String string)
  void onRedirectReceived(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
    jni.JString string,
  ) {
    return _onRedirectReceived(reference, urlRequest.reference,
            urlResponseInfo.reference, string.reference)
        .check();
  }

  static final _onResponseStarted = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "UrlRequest_Callback__onResponseStarted")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onResponseStarted(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo)
  void onResponseStarted(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
  ) {
    return _onResponseStarted(
            reference, urlRequest.reference, urlResponseInfo.reference)
        .check();
  }

  static final _onReadCompleted = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>,
                      ffi.Pointer<ffi.Void>)>>(
          "UrlRequest_Callback__onReadCompleted")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onReadCompleted(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo, java.nio.ByteBuffer byteBuffer)
  void onReadCompleted(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
    jni.JObject byteBuffer,
  ) {
    return _onReadCompleted(reference, urlRequest.reference,
            urlResponseInfo.reference, byteBuffer.reference)
        .check();
  }

  static final _onSucceeded = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("UrlRequest_Callback__onSucceeded")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onSucceeded(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo)
  void onSucceeded(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
  ) {
    return _onSucceeded(
            reference, urlRequest.reference, urlResponseInfo.reference)
        .check();
  }

  static final _onFailed = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("UrlRequest_Callback__onFailed")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void onFailed(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo, org.chromium.net.CronetException cronetException)
  void onFailed(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
    CronetException cronetException,
  ) {
    return _onFailed(reference, urlRequest.reference, urlResponseInfo.reference,
            cronetException.reference)
        .check();
  }

  static final _onCanceled = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("UrlRequest_Callback__onCanceled")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onCanceled(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo)
  void onCanceled(
    UrlRequest urlRequest,
    UrlResponseInfo urlResponseInfo,
  ) {
    return _onCanceled(
            reference, urlRequest.reference, urlResponseInfo.reference)
        .check();
  }
}

class $UrlRequest_CallbackType extends jni.JObjType<UrlRequest_Callback> {
  const $UrlRequest_CallbackType();

  @override
  String get signature => r"Lorg/chromium/net/UrlRequest$Callback;";

  @override
  UrlRequest_Callback fromRef(jni.JObjectPtr ref) =>
      UrlRequest_Callback.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($UrlRequest_CallbackType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($UrlRequest_CallbackType) &&
        other is $UrlRequest_CallbackType;
  }
}

/// from: org.chromium.net.UrlRequest$Status
class UrlRequest_Status extends jni.JObject {
  @override
  late final jni.JObjType<UrlRequest_Status> $type = type;

  UrlRequest_Status.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $UrlRequest_StatusType();

  /// from: static public final int INVALID
  static const INVALID = -1;

  /// from: static public final int IDLE
  static const IDLE = 0;

  /// from: static public final int WAITING_FOR_STALLED_SOCKET_POOL
  static const WAITING_FOR_STALLED_SOCKET_POOL = 1;

  /// from: static public final int WAITING_FOR_AVAILABLE_SOCKET
  static const WAITING_FOR_AVAILABLE_SOCKET = 2;

  /// from: static public final int WAITING_FOR_DELEGATE
  static const WAITING_FOR_DELEGATE = 3;

  /// from: static public final int WAITING_FOR_CACHE
  static const WAITING_FOR_CACHE = 4;

  /// from: static public final int DOWNLOADING_PAC_FILE
  static const DOWNLOADING_PAC_FILE = 5;

  /// from: static public final int RESOLVING_PROXY_FOR_URL
  static const RESOLVING_PROXY_FOR_URL = 6;

  /// from: static public final int RESOLVING_HOST_IN_PAC_FILE
  static const RESOLVING_HOST_IN_PAC_FILE = 7;

  /// from: static public final int ESTABLISHING_PROXY_TUNNEL
  static const ESTABLISHING_PROXY_TUNNEL = 8;

  /// from: static public final int RESOLVING_HOST
  static const RESOLVING_HOST = 9;

  /// from: static public final int CONNECTING
  static const CONNECTING = 10;

  /// from: static public final int SSL_HANDSHAKE
  static const SSL_HANDSHAKE = 11;

  /// from: static public final int SENDING_REQUEST
  static const SENDING_REQUEST = 12;

  /// from: static public final int WAITING_FOR_RESPONSE
  static const WAITING_FOR_RESPONSE = 13;

  /// from: static public final int READING_RESPONSE
  static const READING_RESPONSE = 14;
}

class $UrlRequest_StatusType extends jni.JObjType<UrlRequest_Status> {
  const $UrlRequest_StatusType();

  @override
  String get signature => r"Lorg/chromium/net/UrlRequest$Status;";

  @override
  UrlRequest_Status fromRef(jni.JObjectPtr ref) =>
      UrlRequest_Status.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($UrlRequest_StatusType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($UrlRequest_StatusType) &&
        other is $UrlRequest_StatusType;
  }
}

/// from: org.chromium.net.UrlRequest$StatusListener
class UrlRequest_StatusListener extends jni.JObject {
  @override
  late final jni.JObjType<UrlRequest_StatusListener> $type = type;

  UrlRequest_StatusListener.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $UrlRequest_StatusListenerType();
  static final _new0 = jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
          "UrlRequest_StatusListener__new0")
      .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory UrlRequest_StatusListener() {
    return UrlRequest_StatusListener.fromRef(_new0().object);
  }

  static final _onStatus = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Int32)>>("UrlRequest_StatusListener__onStatus")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract void onStatus(int i)
  void onStatus(
    int i,
  ) {
    return _onStatus(reference, i).check();
  }
}

class $UrlRequest_StatusListenerType
    extends jni.JObjType<UrlRequest_StatusListener> {
  const $UrlRequest_StatusListenerType();

  @override
  String get signature => r"Lorg/chromium/net/UrlRequest$StatusListener;";

  @override
  UrlRequest_StatusListener fromRef(jni.JObjectPtr ref) =>
      UrlRequest_StatusListener.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($UrlRequest_StatusListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($UrlRequest_StatusListenerType) &&
        other is $UrlRequest_StatusListenerType;
  }
}

/// from: org.chromium.net.UrlRequest
class UrlRequest extends jni.JObject {
  @override
  late final jni.JObjType<UrlRequest> $type = type;

  UrlRequest.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $UrlRequestType();
  static final _new0 = jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
          "UrlRequest__new0")
      .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory UrlRequest() {
    return UrlRequest.fromRef(_new0().object);
  }

  static final _start = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "UrlRequest__start")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void start()
  void start() {
    return _start(reference).check();
  }

  static final _followRedirect = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "UrlRequest__followRedirect")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void followRedirect()
  void followRedirect() {
    return _followRedirect(reference).check();
  }

  static final _read = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("UrlRequest__read")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void read(java.nio.ByteBuffer byteBuffer)
  void read(
    jni.JObject byteBuffer,
  ) {
    return _read(reference, byteBuffer.reference).check();
  }

  static final _cancel = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "UrlRequest__cancel")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void cancel()
  void cancel() {
    return _cancel(reference).check();
  }

  static final _isDone = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "UrlRequest__isDone")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean isDone()
  bool isDone() {
    return _isDone(reference).boolean;
  }

  static final _getStatus = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("UrlRequest__getStatus")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void getStatus(org.chromium.net.UrlRequest$StatusListener statusListener)
  void getStatus(
    UrlRequest_StatusListener statusListener,
  ) {
    return _getStatus(reference, statusListener.reference).check();
  }
}

class $UrlRequestType extends jni.JObjType<UrlRequest> {
  const $UrlRequestType();

  @override
  String get signature => r"Lorg/chromium/net/UrlRequest;";

  @override
  UrlRequest fromRef(jni.JObjectPtr ref) => UrlRequest.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($UrlRequestType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($UrlRequestType) && other is $UrlRequestType;
  }
}

/// from: org.chromium.net.UrlResponseInfo$HeaderBlock
class UrlResponseInfo_HeaderBlock extends jni.JObject {
  @override
  late final jni.JObjType<UrlResponseInfo_HeaderBlock> $type = type;

  UrlResponseInfo_HeaderBlock.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $UrlResponseInfo_HeaderBlockType();
  static final _new0 = jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
          "UrlResponseInfo_HeaderBlock__new0")
      .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory UrlResponseInfo_HeaderBlock() {
    return UrlResponseInfo_HeaderBlock.fromRef(_new0().object);
  }

  static final _getAsList = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "UrlResponseInfo_HeaderBlock__getAsList")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.util.List getAsList()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JList<jni.JObject> getAsList() {
    return const jni.JListType(jni.JObjectType())
        .fromRef(_getAsList(reference).object);
  }

  static final _getAsMap = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "UrlResponseInfo_HeaderBlock__getAsMap")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.util.Map getAsMap()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JMap<jni.JString, jni.JList<jni.JString>> getAsMap() {
    return const jni.JMapType(
            jni.JStringType(), jni.JListType(jni.JStringType()))
        .fromRef(_getAsMap(reference).object);
  }
}

class $UrlResponseInfo_HeaderBlockType
    extends jni.JObjType<UrlResponseInfo_HeaderBlock> {
  const $UrlResponseInfo_HeaderBlockType();

  @override
  String get signature => r"Lorg/chromium/net/UrlResponseInfo$HeaderBlock;";

  @override
  UrlResponseInfo_HeaderBlock fromRef(jni.JObjectPtr ref) =>
      UrlResponseInfo_HeaderBlock.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($UrlResponseInfo_HeaderBlockType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($UrlResponseInfo_HeaderBlockType) &&
        other is $UrlResponseInfo_HeaderBlockType;
  }
}

/// from: org.chromium.net.UrlResponseInfo
class UrlResponseInfo extends jni.JObject {
  @override
  late final jni.JObjType<UrlResponseInfo> $type = type;

  UrlResponseInfo.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $UrlResponseInfoType();
  static final _new0 = jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
          "UrlResponseInfo__new0")
      .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory UrlResponseInfo() {
    return UrlResponseInfo.fromRef(_new0().object);
  }

  static final _getUrl = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "UrlResponseInfo__getUrl")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getUrl()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getUrl() {
    return const jni.JStringType().fromRef(_getUrl(reference).object);
  }

  static final _getUrlChain = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "UrlResponseInfo__getUrlChain")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.util.List getUrlChain()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JList<jni.JString> getUrlChain() {
    return const jni.JListType(jni.JStringType())
        .fromRef(_getUrlChain(reference).object);
  }

  static final _getHttpStatusCode = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "UrlResponseInfo__getHttpStatusCode")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int getHttpStatusCode()
  int getHttpStatusCode() {
    return _getHttpStatusCode(reference).integer;
  }

  static final _getHttpStatusText = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "UrlResponseInfo__getHttpStatusText")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getHttpStatusText()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getHttpStatusText() {
    return const jni.JStringType()
        .fromRef(_getHttpStatusText(reference).object);
  }

  static final _getAllHeadersAsList = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "UrlResponseInfo__getAllHeadersAsList")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.util.List getAllHeadersAsList()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JList<jni.JObject> getAllHeadersAsList() {
    return const jni.JListType(jni.JObjectType())
        .fromRef(_getAllHeadersAsList(reference).object);
  }

  static final _getAllHeaders = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "UrlResponseInfo__getAllHeaders")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.util.Map getAllHeaders()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JMap<jni.JString, jni.JList<jni.JString>> getAllHeaders() {
    return const jni.JMapType(
            jni.JStringType(), jni.JListType(jni.JStringType()))
        .fromRef(_getAllHeaders(reference).object);
  }

  static final _wasCached = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "UrlResponseInfo__wasCached")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean wasCached()
  bool wasCached() {
    return _wasCached(reference).boolean;
  }

  static final _getNegotiatedProtocol = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "UrlResponseInfo__getNegotiatedProtocol")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getNegotiatedProtocol()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getNegotiatedProtocol() {
    return const jni.JStringType()
        .fromRef(_getNegotiatedProtocol(reference).object);
  }

  static final _getProxyServer = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "UrlResponseInfo__getProxyServer")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getProxyServer()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getProxyServer() {
    return const jni.JStringType().fromRef(_getProxyServer(reference).object);
  }

  static final _getReceivedByteCount = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "UrlResponseInfo__getReceivedByteCount")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract long getReceivedByteCount()
  int getReceivedByteCount() {
    return _getReceivedByteCount(reference).long;
  }
}

class $UrlResponseInfoType extends jni.JObjType<UrlResponseInfo> {
  const $UrlResponseInfoType();

  @override
  String get signature => r"Lorg/chromium/net/UrlResponseInfo;";

  @override
  UrlResponseInfo fromRef(jni.JObjectPtr ref) => UrlResponseInfo.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($UrlResponseInfoType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($UrlResponseInfoType) &&
        other is $UrlResponseInfoType;
  }
}
