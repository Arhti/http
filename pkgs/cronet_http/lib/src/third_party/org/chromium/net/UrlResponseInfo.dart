// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

/// from: org.chromium.net.UrlResponseInfo$HeaderBlock
class UrlResponseInfo_HeaderBlock extends jni.JObject {
  @override
  late final jni.JObjType<UrlResponseInfo_HeaderBlock> $type = type;

  UrlResponseInfo_HeaderBlock.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"org/chromium/net/UrlResponseInfo$HeaderBlock");

  /// The type which includes information such as the signature of this class.
  static const type = $UrlResponseInfo_HeaderBlockType();
  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory UrlResponseInfo_HeaderBlock() {
    return UrlResponseInfo_HeaderBlock.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, []).object);
  }

  static final _id_getAsList = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getAsList", r"()Ljava/util/List;");

  /// from: public abstract java.util.List getAsList()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JList<jni.JObject> getAsList() {
    return const jni.JListType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_getAsList, jni.JniCallType.objectType, []).object);
  }

  static final _id_getAsMap = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getAsMap", r"()Ljava/util/Map;");

  /// from: public abstract java.util.Map getAsMap()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JMap<jni.JString, jni.JList<jni.JString>> getAsMap() {
    return const jni.JMapType(
            jni.JStringType(), jni.JListType(jni.JStringType()))
        .fromRef(jni.Jni.accessors.callMethodWithArgs(
            reference, _id_getAsMap, jni.JniCallType.objectType, []).object);
  }
}

class $UrlResponseInfo_HeaderBlockType
    extends jni.JObjType<UrlResponseInfo_HeaderBlock> {
  const $UrlResponseInfo_HeaderBlockType();

  @override
  String get signature => r"Lorg/chromium/net/UrlResponseInfo$HeaderBlock;";

  @override
  UrlResponseInfo_HeaderBlock fromRef(jni.JObjectPtr ref) =>
      UrlResponseInfo_HeaderBlock.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($UrlResponseInfo_HeaderBlockType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($UrlResponseInfo_HeaderBlockType) &&
        other is $UrlResponseInfo_HeaderBlockType;
  }
}

/// from: org.chromium.net.UrlResponseInfo
class UrlResponseInfo extends jni.JObject {
  @override
  late final jni.JObjType<UrlResponseInfo> $type = type;

  UrlResponseInfo.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"org/chromium/net/UrlResponseInfo");

  /// The type which includes information such as the signature of this class.
  static const type = $UrlResponseInfoType();
  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory UrlResponseInfo() {
    return UrlResponseInfo.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, []).object);
  }

  static final _id_getUrl = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getUrl", r"()Ljava/lang/String;");

  /// from: public abstract java.lang.String getUrl()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getUrl() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getUrl, jni.JniCallType.objectType, []).object);
  }

  static final _id_getUrlChain = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getUrlChain", r"()Ljava/util/List;");

  /// from: public abstract java.util.List getUrlChain()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JList<jni.JString> getUrlChain() {
    return const jni.JListType(jni.JStringType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_getUrlChain, jni.JniCallType.objectType, []).object);
  }

  static final _id_getHttpStatusCode = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getHttpStatusCode", r"()I");

  /// from: public abstract int getHttpStatusCode()
  int getHttpStatusCode() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getHttpStatusCode, jni.JniCallType.intType, []).integer;
  }

  static final _id_getHttpStatusText = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getHttpStatusText", r"()Ljava/lang/String;");

  /// from: public abstract java.lang.String getHttpStatusText()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getHttpStatusText() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getHttpStatusText,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getAllHeadersAsList = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getAllHeadersAsList", r"()Ljava/util/List;");

  /// from: public abstract java.util.List getAllHeadersAsList()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JList<jni.JObject> getAllHeadersAsList() {
    return const jni.JListType(jni.JObjectType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getAllHeadersAsList,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_getAllHeaders = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getAllHeaders", r"()Ljava/util/Map;");

  /// from: public abstract java.util.Map getAllHeaders()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JMap<jni.JString, jni.JList<jni.JString>> getAllHeaders() {
    return const jni.JMapType(
            jni.JStringType(), jni.JListType(jni.JStringType()))
        .fromRef(jni.Jni.accessors.callMethodWithArgs(reference,
            _id_getAllHeaders, jni.JniCallType.objectType, []).object);
  }

  static final _id_wasCached =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"wasCached", r"()Z");

  /// from: public abstract boolean wasCached()
  bool wasCached() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_wasCached, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getNegotiatedProtocol = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getNegotiatedProtocol", r"()Ljava/lang/String;");

  /// from: public abstract java.lang.String getNegotiatedProtocol()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getNegotiatedProtocol() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getNegotiatedProtocol,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_getProxyServer = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getProxyServer", r"()Ljava/lang/String;");

  /// from: public abstract java.lang.String getProxyServer()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getProxyServer() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getProxyServer, jni.JniCallType.objectType, []).object);
  }

  static final _id_getReceivedByteCount = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getReceivedByteCount", r"()J");

  /// from: public abstract long getReceivedByteCount()
  int getReceivedByteCount() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getReceivedByteCount, jni.JniCallType.longType, []).long;
  }
}

class $UrlResponseInfoType extends jni.JObjType<UrlResponseInfo> {
  const $UrlResponseInfoType();

  @override
  String get signature => r"Lorg/chromium/net/UrlResponseInfo;";

  @override
  UrlResponseInfo fromRef(jni.JObjectPtr ref) => UrlResponseInfo.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($UrlResponseInfoType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($UrlResponseInfoType) &&
        other is $UrlResponseInfoType;
  }
}
