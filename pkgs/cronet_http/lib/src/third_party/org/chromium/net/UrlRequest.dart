// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "UrlResponseInfo.dart" as urlresponseinfo_;

import "CronetException.dart" as cronetexception_;

/// from: org.chromium.net.UrlRequest
class UrlRequest extends jni.JObject {
  @override
  late final jni.JObjType<UrlRequest> $type = type;

  UrlRequest.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"org/chromium/net/UrlRequest");

  /// The type which includes information such as the signature of this class.
  static const type = $UrlRequestType();
  static final _id_ctor =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory UrlRequest() {
    return UrlRequest.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_ctor, []).object);
  }

  static final _id_start =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"start", r"()V");

  /// from: public abstract void start()
  void start() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_start, jni.JniCallType.voidType, []).check();
  }

  static final _id_followRedirect = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"followRedirect", r"()V");

  /// from: public abstract void followRedirect()
  void followRedirect() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_followRedirect, jni.JniCallType.voidType, []).check();
  }

  static final _id_read = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"read", r"(Ljava/nio/ByteBuffer;)V");

  /// from: public abstract void read(java.nio.ByteBuffer byteBuffer)
  void read(
    jni.JObject byteBuffer,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_read,
        jni.JniCallType.voidType, [byteBuffer.reference]).check();
  }

  static final _id_cancel =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"cancel", r"()V");

  /// from: public abstract void cancel()
  void cancel() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_cancel, jni.JniCallType.voidType, []).check();
  }

  static final _id_isDone =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isDone", r"()Z");

  /// from: public abstract boolean isDone()
  bool isDone() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isDone, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getStatus = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"getStatus", r"(Lorg/chromium/net/UrlRequest$StatusListener;)V");

  /// from: public abstract void getStatus(org.chromium.net.UrlRequest$StatusListener statusListener)
  void getStatus(
    jni.JObject statusListener,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_getStatus,
        jni.JniCallType.voidType, [statusListener.reference]).check();
  }
}

class $UrlRequestType extends jni.JObjType<UrlRequest> {
  const $UrlRequestType();

  @override
  String get signature => r"Lorg/chromium/net/UrlRequest;";

  @override
  UrlRequest fromRef(jni.JObjectPtr ref) => UrlRequest.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($UrlRequestType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($UrlRequestType) && other is $UrlRequestType;
  }
}

/// from: org.chromium.net.UrlRequest$Callback
class UrlRequest_Callback extends jni.JObject {
  @override
  late final jni.JObjType<UrlRequest_Callback> $type = type;

  UrlRequest_Callback.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"org/chromium/net/UrlRequest$Callback");

  /// The type which includes information such as the signature of this class.
  static const type = $UrlRequest_CallbackType();
  static final _id_ctor =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory UrlRequest_Callback() {
    return UrlRequest_Callback.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_ctor, []).object);
  }

  static final _id_onRedirectReceived = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onRedirectReceived",
      r"(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;Ljava/lang/String;)V");

  /// from: public abstract void onRedirectReceived(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo, java.lang.String string)
  void onRedirectReceived(
    UrlRequest urlRequest,
    urlresponseinfo_.UrlResponseInfo urlResponseInfo,
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onRedirectReceived, jni.JniCallType.voidType, [
      urlRequest.reference,
      urlResponseInfo.reference,
      string.reference
    ]).check();
  }

  static final _id_onResponseStarted = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onResponseStarted",
      r"(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;)V");

  /// from: public abstract void onResponseStarted(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo)
  void onResponseStarted(
    UrlRequest urlRequest,
    urlresponseinfo_.UrlResponseInfo urlResponseInfo,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onResponseStarted,
        jni.JniCallType.voidType,
        [urlRequest.reference, urlResponseInfo.reference]).check();
  }

  static final _id_onReadCompleted = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onReadCompleted",
      r"(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;Ljava/nio/ByteBuffer;)V");

  /// from: public abstract void onReadCompleted(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo, java.nio.ByteBuffer byteBuffer)
  void onReadCompleted(
    UrlRequest urlRequest,
    urlresponseinfo_.UrlResponseInfo urlResponseInfo,
    jni.JObject byteBuffer,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onReadCompleted, jni.JniCallType.voidType, [
      urlRequest.reference,
      urlResponseInfo.reference,
      byteBuffer.reference
    ]).check();
  }

  static final _id_onSucceeded = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onSucceeded",
      r"(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;)V");

  /// from: public abstract void onSucceeded(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo)
  void onSucceeded(
    UrlRequest urlRequest,
    urlresponseinfo_.UrlResponseInfo urlResponseInfo,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onSucceeded,
        jni.JniCallType.voidType,
        [urlRequest.reference, urlResponseInfo.reference]).check();
  }

  static final _id_onFailed = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onFailed",
      r"(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;Lorg/chromium/net/CronetException;)V");

  /// from: public abstract void onFailed(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo, org.chromium.net.CronetException cronetException)
  void onFailed(
    UrlRequest urlRequest,
    urlresponseinfo_.UrlResponseInfo urlResponseInfo,
    cronetexception_.CronetException cronetException,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_onFailed, jni.JniCallType.voidType, [
      urlRequest.reference,
      urlResponseInfo.reference,
      cronetException.reference
    ]).check();
  }

  static final _id_onCanceled = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onCanceled",
      r"(Lorg/chromium/net/UrlRequest;Lorg/chromium/net/UrlResponseInfo;)V");

  /// from: public void onCanceled(org.chromium.net.UrlRequest urlRequest, org.chromium.net.UrlResponseInfo urlResponseInfo)
  void onCanceled(
    UrlRequest urlRequest,
    urlresponseinfo_.UrlResponseInfo urlResponseInfo,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onCanceled,
        jni.JniCallType.voidType,
        [urlRequest.reference, urlResponseInfo.reference]).check();
  }
}

class $UrlRequest_CallbackType extends jni.JObjType<UrlRequest_Callback> {
  const $UrlRequest_CallbackType();

  @override
  String get signature => r"Lorg/chromium/net/UrlRequest$Callback;";

  @override
  UrlRequest_Callback fromRef(jni.JObjectPtr ref) =>
      UrlRequest_Callback.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($UrlRequest_CallbackType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($UrlRequest_CallbackType) &&
        other is $UrlRequest_CallbackType;
  }
}
