// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

/// from: org.chromium.net.CronetException
class CronetException extends jni.JObject {
  @override
  late final jni.JObjType<CronetException> $type = type;

  CronetException.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"org/chromium/net/CronetException");

  /// The type which includes information such as the signature of this class.
  static const type = $CronetExceptionType();
  static final _id_ctor = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Ljava/lang/String;Ljava/lang/Throwable;)V");

  /// from: protected void <init>(java.lang.String string, java.lang.Throwable throwable)
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory CronetException(
    jni.JString string,
    jni.JObject throwable,
  ) {
    return CronetException.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference,
        _id_ctor,
        [string.reference, throwable.reference]).object);
  }
}

class $CronetExceptionType extends jni.JObjType<CronetException> {
  const $CronetExceptionType();

  @override
  String get signature => r"Lorg/chromium/net/CronetException;";

  @override
  CronetException fromRef(jni.JObjectPtr ref) => CronetException.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CronetExceptionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CronetExceptionType) &&
        other is $CronetExceptionType;
  }
}
