// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "UrlRequest.dart" as urlrequest_;

/// from: org.chromium.net.CronetEngine
class CronetEngine extends jni.JObject {
  @override
  late final jni.JObjType<CronetEngine> $type = type;

  CronetEngine.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"org/chromium/net/CronetEngine");

  /// The type which includes information such as the signature of this class.
  static const type = $CronetEngineType();

  /// from: static public final int ACTIVE_REQUEST_COUNT_UNKNOWN
  static const ACTIVE_REQUEST_COUNT_UNKNOWN = -1;

  /// from: static public final int CONNECTION_METRIC_UNKNOWN
  static const CONNECTION_METRIC_UNKNOWN = -1;

  /// from: static public final int EFFECTIVE_CONNECTION_TYPE_UNKNOWN
  static const EFFECTIVE_CONNECTION_TYPE_UNKNOWN = 0;

  /// from: static public final int EFFECTIVE_CONNECTION_TYPE_OFFLINE
  static const EFFECTIVE_CONNECTION_TYPE_OFFLINE = 1;

  /// from: static public final int EFFECTIVE_CONNECTION_TYPE_SLOW_2G
  static const EFFECTIVE_CONNECTION_TYPE_SLOW_2G = 2;

  /// from: static public final int EFFECTIVE_CONNECTION_TYPE_2G
  static const EFFECTIVE_CONNECTION_TYPE_2G = 3;

  /// from: static public final int EFFECTIVE_CONNECTION_TYPE_3G
  static const EFFECTIVE_CONNECTION_TYPE_3G = 4;

  /// from: static public final int EFFECTIVE_CONNECTION_TYPE_4G
  static const EFFECTIVE_CONNECTION_TYPE_4G = 5;

  static final _id_ctor =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory CronetEngine() {
    return CronetEngine.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_ctor, []).object);
  }

  static final _id_getVersionString = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getVersionString", r"()Ljava/lang/String;");

  /// from: public abstract java.lang.String getVersionString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getVersionString() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getVersionString,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_shutdown =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"shutdown", r"()V");

  /// from: public abstract void shutdown()
  void shutdown() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_shutdown, jni.JniCallType.voidType, []).check();
  }

  static final _id_startNetLogToFile = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"startNetLogToFile", r"(Ljava/lang/String;Z)V");

  /// from: public abstract void startNetLogToFile(java.lang.String string, boolean z)
  void startNetLogToFile(
    jni.JString string,
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startNetLogToFile,
        jni.JniCallType.voidType,
        [string.reference, z ? 1 : 0]).check();
  }

  static final _id_stopNetLog =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"stopNetLog", r"()V");

  /// from: public abstract void stopNetLog()
  void stopNetLog() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_stopNetLog, jni.JniCallType.voidType, []).check();
  }

  static final _id_getGlobalMetricsDeltas = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getGlobalMetricsDeltas", r"()[B");

  /// from: public abstract byte[] getGlobalMetricsDeltas()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JArray<jni.jbyte> getGlobalMetricsDeltas() {
    return const jni.JArrayType(jni.jbyteType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getGlobalMetricsDeltas,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_openConnection = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"openConnection",
      r"(Ljava/net/URL;)Ljava/net/URLConnection;");

  /// from: public abstract java.net.URLConnection openConnection(java.net.URL uRL)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject openConnection(
    jni.JObject uRL,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_openConnection,
        jni.JniCallType.objectType,
        [uRL.reference]).object);
  }

  static final _id_createURLStreamHandlerFactory = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"createURLStreamHandlerFactory",
          r"()Ljava/net/URLStreamHandlerFactory;");

  /// from: public abstract java.net.URLStreamHandlerFactory createURLStreamHandlerFactory()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject createURLStreamHandlerFactory() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_createURLStreamHandlerFactory,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_newUrlRequestBuilder = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"newUrlRequestBuilder",
      r"(Ljava/lang/String;Lorg/chromium/net/UrlRequest$Callback;Ljava/util/concurrent/Executor;)Lorg/chromium/net/UrlRequest$Builder;");

  /// from: public abstract org.chromium.net.UrlRequest$Builder newUrlRequestBuilder(java.lang.String string, org.chromium.net.UrlRequest$Callback callback, java.util.concurrent.Executor executor)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject newUrlRequestBuilder(
    jni.JString string,
    urlrequest_.UrlRequest_Callback callback,
    jni.JObject executor,
  ) {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_newUrlRequestBuilder,
        jni.JniCallType.objectType,
        [string.reference, callback.reference, executor.reference]).object);
  }

  static final _id_getActiveRequestCount = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getActiveRequestCount", r"()I");

  /// from: public int getActiveRequestCount()
  int getActiveRequestCount() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_getActiveRequestCount, jni.JniCallType.intType, []).integer;
  }

  static final _id_addRequestFinishedListener = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addRequestFinishedListener",
      r"(Lorg/chromium/net/RequestFinishedInfo$Listener;)V");

  /// from: public void addRequestFinishedListener(org.chromium.net.RequestFinishedInfo$Listener listener)
  void addRequestFinishedListener(
    jni.JObject listener,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addRequestFinishedListener,
        jni.JniCallType.voidType,
        [listener.reference]).check();
  }

  static final _id_removeRequestFinishedListener = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"removeRequestFinishedListener",
          r"(Lorg/chromium/net/RequestFinishedInfo$Listener;)V");

  /// from: public void removeRequestFinishedListener(org.chromium.net.RequestFinishedInfo$Listener listener)
  void removeRequestFinishedListener(
    jni.JObject listener,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_removeRequestFinishedListener,
        jni.JniCallType.voidType,
        [listener.reference]).check();
  }

  static final _id_getHttpRttMs = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getHttpRttMs", r"()I");

  /// from: public int getHttpRttMs()
  int getHttpRttMs() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getHttpRttMs, jni.JniCallType.intType, []).integer;
  }

  static final _id_getTransportRttMs = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getTransportRttMs", r"()I");

  /// from: public int getTransportRttMs()
  int getTransportRttMs() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getTransportRttMs, jni.JniCallType.intType, []).integer;
  }

  static final _id_getDownstreamThroughputKbps = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getDownstreamThroughputKbps", r"()I");

  /// from: public int getDownstreamThroughputKbps()
  int getDownstreamThroughputKbps() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_getDownstreamThroughputKbps, jni.JniCallType.intType, []).integer;
  }

  static final _id_startNetLogToDisk = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"startNetLogToDisk", r"(Ljava/lang/String;ZI)V");

  /// from: public void startNetLogToDisk(java.lang.String string, boolean z, int i)
  void startNetLogToDisk(
    jni.JString string,
    bool z,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_startNetLogToDisk,
        jni.JniCallType.voidType,
        [string.reference, z ? 1 : 0, jni.JValueInt(i)]).check();
  }

  static final _id_getEffectiveConnectionType = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getEffectiveConnectionType", r"()I");

  /// from: public int getEffectiveConnectionType()
  int getEffectiveConnectionType() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_getEffectiveConnectionType, jni.JniCallType.intType, []).integer;
  }

  static final _id_configureNetworkQualityEstimatorForTesting =
      jni.Jni.accessors.getMethodIDOf(_class.reference,
          r"configureNetworkQualityEstimatorForTesting", r"(ZZZ)V");

  /// from: public void configureNetworkQualityEstimatorForTesting(boolean z, boolean z1, boolean z2)
  void configureNetworkQualityEstimatorForTesting(
    bool z,
    bool z1,
    bool z2,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_configureNetworkQualityEstimatorForTesting,
        jni.JniCallType.voidType,
        [z ? 1 : 0, z1 ? 1 : 0, z2 ? 1 : 0]).check();
  }

  static final _id_addRttListener = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addRttListener",
      r"(Lorg/chromium/net/NetworkQualityRttListener;)V");

  /// from: public void addRttListener(org.chromium.net.NetworkQualityRttListener networkQualityRttListener)
  void addRttListener(
    jni.JObject networkQualityRttListener,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addRttListener,
        jni.JniCallType.voidType,
        [networkQualityRttListener.reference]).check();
  }

  static final _id_removeRttListener = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"removeRttListener",
      r"(Lorg/chromium/net/NetworkQualityRttListener;)V");

  /// from: public void removeRttListener(org.chromium.net.NetworkQualityRttListener networkQualityRttListener)
  void removeRttListener(
    jni.JObject networkQualityRttListener,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_removeRttListener,
        jni.JniCallType.voidType,
        [networkQualityRttListener.reference]).check();
  }

  static final _id_addThroughputListener = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addThroughputListener",
      r"(Lorg/chromium/net/NetworkQualityThroughputListener;)V");

  /// from: public void addThroughputListener(org.chromium.net.NetworkQualityThroughputListener networkQualityThroughputListener)
  void addThroughputListener(
    jni.JObject networkQualityThroughputListener,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addThroughputListener,
        jni.JniCallType.voidType,
        [networkQualityThroughputListener.reference]).check();
  }

  static final _id_removeThroughputListener = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"removeThroughputListener",
      r"(Lorg/chromium/net/NetworkQualityThroughputListener;)V");

  /// from: public void removeThroughputListener(org.chromium.net.NetworkQualityThroughputListener networkQualityThroughputListener)
  void removeThroughputListener(
    jni.JObject networkQualityThroughputListener,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_removeThroughputListener,
        jni.JniCallType.voidType,
        [networkQualityThroughputListener.reference]).check();
  }
}

class $CronetEngineType extends jni.JObjType<CronetEngine> {
  const $CronetEngineType();

  @override
  String get signature => r"Lorg/chromium/net/CronetEngine;";

  @override
  CronetEngine fromRef(jni.JObjectPtr ref) => CronetEngine.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CronetEngineType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CronetEngineType) &&
        other is $CronetEngineType;
  }
}

/// from: org.chromium.net.CronetEngine$Builder
class CronetEngine_Builder extends jni.JObject {
  @override
  late final jni.JObjType<CronetEngine_Builder> $type = type;

  CronetEngine_Builder.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"org/chromium/net/CronetEngine$Builder");

  /// The type which includes information such as the signature of this class.
  static const type = $CronetEngine_BuilderType();
  static final _id_mBuilderDelegate = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"mBuilderDelegate",
    r"Lorg/chromium/net/ICronetEngineBuilder;",
  );

  /// from: protected final org.chromium.net.ICronetEngineBuilder mBuilderDelegate
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject get mBuilderDelegate =>
      const jni.JObjectType().fromRef(jni.Jni.accessors
          .getField(reference, _id_mBuilderDelegate, jni.JniCallType.objectType)
          .object);

  /// from: static public final int HTTP_CACHE_DISABLED
  static const HTTP_CACHE_DISABLED = 0;

  /// from: static public final int HTTP_CACHE_IN_MEMORY
  static const HTTP_CACHE_IN_MEMORY = 1;

  /// from: static public final int HTTP_CACHE_DISK_NO_HTTP
  static const HTTP_CACHE_DISK_NO_HTTP = 2;

  /// from: static public final int HTTP_CACHE_DISK
  static const HTTP_CACHE_DISK = 3;

  static final _id_ctor = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Landroid/content/Context;)V");

  /// from: public void <init>(android.content.Context context)
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory CronetEngine_Builder(
    jni.JObject context,
  ) {
    return CronetEngine_Builder.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_ctor, [context.reference]).object);
  }

  static final _id_ctor1 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Lorg/chromium/net/ICronetEngineBuilder;)V");

  /// from: public void <init>(org.chromium.net.ICronetEngineBuilder iCronetEngineBuilder)
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory CronetEngine_Builder.ctor1(
    jni.JObject iCronetEngineBuilder,
  ) {
    return CronetEngine_Builder.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_ctor1, [iCronetEngineBuilder.reference]).object);
  }

  static final _id_getDefaultUserAgent = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getDefaultUserAgent", r"()Ljava/lang/String;");

  /// from: public java.lang.String getDefaultUserAgent()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getDefaultUserAgent() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getDefaultUserAgent,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_setUserAgent = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setUserAgent",
      r"(Ljava/lang/String;)Lorg/chromium/net/CronetEngine$Builder;");

  /// from: public org.chromium.net.CronetEngine$Builder setUserAgent(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine_Builder setUserAgent(
    jni.JString string,
  ) {
    return const $CronetEngine_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setUserAgent,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_setStoragePath = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setStoragePath",
      r"(Ljava/lang/String;)Lorg/chromium/net/CronetEngine$Builder;");

  /// from: public org.chromium.net.CronetEngine$Builder setStoragePath(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine_Builder setStoragePath(
    jni.JString string,
  ) {
    return const $CronetEngine_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setStoragePath,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_setLibraryLoader = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setLibraryLoader",
      r"(Lorg/chromium/net/CronetEngine$Builder$LibraryLoader;)Lorg/chromium/net/CronetEngine$Builder;");

  /// from: public org.chromium.net.CronetEngine$Builder setLibraryLoader(org.chromium.net.CronetEngine$Builder$LibraryLoader libraryLoader)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine_Builder setLibraryLoader(
    jni.JObject libraryLoader,
  ) {
    return const $CronetEngine_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setLibraryLoader,
            jni.JniCallType.objectType, [libraryLoader.reference]).object);
  }

  static final _id_enableQuic = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"enableQuic",
      r"(Z)Lorg/chromium/net/CronetEngine$Builder;");

  /// from: public org.chromium.net.CronetEngine$Builder enableQuic(boolean z)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine_Builder enableQuic(
    bool z,
  ) {
    return const $CronetEngine_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_enableQuic,
            jni.JniCallType.objectType, [z ? 1 : 0]).object);
  }

  static final _id_enableHttp2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"enableHttp2",
      r"(Z)Lorg/chromium/net/CronetEngine$Builder;");

  /// from: public org.chromium.net.CronetEngine$Builder enableHttp2(boolean z)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine_Builder enableHttp2(
    bool z,
  ) {
    return const $CronetEngine_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_enableHttp2,
            jni.JniCallType.objectType, [z ? 1 : 0]).object);
  }

  static final _id_enableSdch = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"enableSdch",
      r"(Z)Lorg/chromium/net/CronetEngine$Builder;");

  /// from: public org.chromium.net.CronetEngine$Builder enableSdch(boolean z)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine_Builder enableSdch(
    bool z,
  ) {
    return const $CronetEngine_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_enableSdch,
            jni.JniCallType.objectType, [z ? 1 : 0]).object);
  }

  static final _id_enableBrotli = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"enableBrotli",
      r"(Z)Lorg/chromium/net/CronetEngine$Builder;");

  /// from: public org.chromium.net.CronetEngine$Builder enableBrotli(boolean z)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine_Builder enableBrotli(
    bool z,
  ) {
    return const $CronetEngine_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_enableBrotli,
            jni.JniCallType.objectType, [z ? 1 : 0]).object);
  }

  static final _id_enableHttpCache = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"enableHttpCache",
      r"(IJ)Lorg/chromium/net/CronetEngine$Builder;");

  /// from: public org.chromium.net.CronetEngine$Builder enableHttpCache(int i, long j)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine_Builder enableHttpCache(
    int i,
    int j,
  ) {
    return const $CronetEngine_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_enableHttpCache,
            jni.JniCallType.objectType, [jni.JValueInt(i), j]).object);
  }

  static final _id_addQuicHint = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addQuicHint",
      r"(Ljava/lang/String;II)Lorg/chromium/net/CronetEngine$Builder;");

  /// from: public org.chromium.net.CronetEngine$Builder addQuicHint(java.lang.String string, int i, int i1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine_Builder addQuicHint(
    jni.JString string,
    int i,
    int i1,
  ) {
    return const $CronetEngine_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_addQuicHint,
            jni.JniCallType.objectType,
            [string.reference, jni.JValueInt(i), jni.JValueInt(i1)]).object);
  }

  static final _id_addPublicKeyPins = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addPublicKeyPins",
      r"(Ljava/lang/String;Ljava/util/Set;ZLjava/util/Date;)Lorg/chromium/net/CronetEngine$Builder;");

  /// from: public org.chromium.net.CronetEngine$Builder addPublicKeyPins(java.lang.String string, java.util.Set set, boolean z, java.util.Date date)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine_Builder addPublicKeyPins(
    jni.JString string,
    jni.JSet<jni.JArray<jni.jbyte>> set0,
    bool z,
    jni.JObject date,
  ) {
    return const $CronetEngine_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_addPublicKeyPins, jni.JniCallType.objectType, [
      string.reference,
      set0.reference,
      z ? 1 : 0,
      date.reference
    ]).object);
  }

  static final _id_enablePublicKeyPinningBypassForLocalTrustAnchors =
      jni.Jni.accessors.getMethodIDOf(
          _class.reference,
          r"enablePublicKeyPinningBypassForLocalTrustAnchors",
          r"(Z)Lorg/chromium/net/CronetEngine$Builder;");

  /// from: public org.chromium.net.CronetEngine$Builder enablePublicKeyPinningBypassForLocalTrustAnchors(boolean z)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine_Builder enablePublicKeyPinningBypassForLocalTrustAnchors(
    bool z,
  ) {
    return const $CronetEngine_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_enablePublicKeyPinningBypassForLocalTrustAnchors,
            jni.JniCallType.objectType,
            [z ? 1 : 0]).object);
  }

  static final _id_setThreadPriority = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setThreadPriority",
      r"(I)Lorg/chromium/net/CronetEngine$Builder;");

  /// from: public org.chromium.net.CronetEngine$Builder setThreadPriority(int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine_Builder setThreadPriority(
    int i,
  ) {
    return const $CronetEngine_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setThreadPriority,
            jni.JniCallType.objectType, [jni.JValueInt(i)]).object);
  }

  static final _id_enableNetworkQualityEstimator = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"enableNetworkQualityEstimator",
          r"(Z)Lorg/chromium/net/CronetEngine$Builder;");

  /// from: public org.chromium.net.CronetEngine$Builder enableNetworkQualityEstimator(boolean z)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine_Builder enableNetworkQualityEstimator(
    bool z,
  ) {
    return const $CronetEngine_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_enableNetworkQualityEstimator,
            jni.JniCallType.objectType, [z ? 1 : 0]).object);
  }

  static final _id_setQuicOptions = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setQuicOptions",
      r"(Lorg/chromium/net/QuicOptions;)Lorg/chromium/net/CronetEngine$Builder;");

  /// from: public org.chromium.net.CronetEngine$Builder setQuicOptions(org.chromium.net.QuicOptions quicOptions)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine_Builder setQuicOptions(
    jni.JObject quicOptions,
  ) {
    return const $CronetEngine_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setQuicOptions,
            jni.JniCallType.objectType, [quicOptions.reference]).object);
  }

  static final _id_setQuicOptions1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setQuicOptions",
      r"(Lorg/chromium/net/QuicOptions$Builder;)Lorg/chromium/net/CronetEngine$Builder;");

  /// from: public org.chromium.net.CronetEngine$Builder setQuicOptions(org.chromium.net.QuicOptions$Builder builder)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine_Builder setQuicOptions1(
    jni.JObject builder,
  ) {
    return const $CronetEngine_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setQuicOptions1,
            jni.JniCallType.objectType, [builder.reference]).object);
  }

  static final _id_setDnsOptions = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setDnsOptions",
      r"(Lorg/chromium/net/DnsOptions;)Lorg/chromium/net/CronetEngine$Builder;");

  /// from: public org.chromium.net.CronetEngine$Builder setDnsOptions(org.chromium.net.DnsOptions dnsOptions)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine_Builder setDnsOptions(
    jni.JObject dnsOptions,
  ) {
    return const $CronetEngine_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setDnsOptions,
            jni.JniCallType.objectType, [dnsOptions.reference]).object);
  }

  static final _id_setDnsOptions1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setDnsOptions",
      r"(Lorg/chromium/net/DnsOptions$Builder;)Lorg/chromium/net/CronetEngine$Builder;");

  /// from: public org.chromium.net.CronetEngine$Builder setDnsOptions(org.chromium.net.DnsOptions$Builder builder)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine_Builder setDnsOptions1(
    jni.JObject builder,
  ) {
    return const $CronetEngine_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setDnsOptions1,
            jni.JniCallType.objectType, [builder.reference]).object);
  }

  static final _id_setConnectionMigrationOptions = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setConnectionMigrationOptions",
      r"(Lorg/chromium/net/ConnectionMigrationOptions;)Lorg/chromium/net/CronetEngine$Builder;");

  /// from: public org.chromium.net.CronetEngine$Builder setConnectionMigrationOptions(org.chromium.net.ConnectionMigrationOptions connectionMigrationOptions)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine_Builder setConnectionMigrationOptions(
    jni.JObject connectionMigrationOptions,
  ) {
    return const $CronetEngine_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_setConnectionMigrationOptions,
            jni.JniCallType.objectType,
            [connectionMigrationOptions.reference]).object);
  }

  static final _id_setConnectionMigrationOptions1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setConnectionMigrationOptions",
      r"(Lorg/chromium/net/ConnectionMigrationOptions$Builder;)Lorg/chromium/net/CronetEngine$Builder;");

  /// from: public org.chromium.net.CronetEngine$Builder setConnectionMigrationOptions(org.chromium.net.ConnectionMigrationOptions$Builder builder)
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine_Builder setConnectionMigrationOptions1(
    jni.JObject builder,
  ) {
    return const $CronetEngine_BuilderType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_setConnectionMigrationOptions1,
            jni.JniCallType.objectType, [builder.reference]).object);
  }

  static final _id_build = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"build", r"()Lorg/chromium/net/CronetEngine;");

  /// from: public org.chromium.net.CronetEngine build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  CronetEngine build() {
    return const $CronetEngineType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_build, jni.JniCallType.objectType, []).object);
  }
}

class $CronetEngine_BuilderType extends jni.JObjType<CronetEngine_Builder> {
  const $CronetEngine_BuilderType();

  @override
  String get signature => r"Lorg/chromium/net/CronetEngine$Builder;";

  @override
  CronetEngine_Builder fromRef(jni.JObjectPtr ref) =>
      CronetEngine_Builder.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($CronetEngine_BuilderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($CronetEngine_BuilderType) &&
        other is $CronetEngine_BuilderType;
  }
}
